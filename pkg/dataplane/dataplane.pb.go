// Copyright 2025 Hedgehog
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/dataplane.proto

package dataplane

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	Error_ERROR_NONE              Error = 0
	Error_ERROR_VALIDATION_FAILED Error = 1
	Error_ERROR_APPLY_FAILED      Error = 2
	Error_ERROR_UNKNOWN_ERROR     Error = 3
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0: "ERROR_NONE",
		1: "ERROR_VALIDATION_FAILED",
		2: "ERROR_APPLY_FAILED",
		3: "ERROR_UNKNOWN_ERROR",
	}
	Error_value = map[string]int32{
		"ERROR_NONE":              0,
		"ERROR_VALIDATION_FAILED": 1,
		"ERROR_APPLY_FAILED":      2,
		"ERROR_UNKNOWN_ERROR":     3,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{0}
}

// OSPF Network Type
type OspfNetworkType int32

const (
	OspfNetworkType_BROADCAST           OspfNetworkType = 0
	OspfNetworkType_NON_BROADCAST       OspfNetworkType = 1
	OspfNetworkType_POINT_TO_POINT      OspfNetworkType = 2
	OspfNetworkType_POINT_TO_MULTIPOINT OspfNetworkType = 3
)

// Enum value maps for OspfNetworkType.
var (
	OspfNetworkType_name = map[int32]string{
		0: "BROADCAST",
		1: "NON_BROADCAST",
		2: "POINT_TO_POINT",
		3: "POINT_TO_MULTIPOINT",
	}
	OspfNetworkType_value = map[string]int32{
		"BROADCAST":           0,
		"NON_BROADCAST":       1,
		"POINT_TO_POINT":      2,
		"POINT_TO_MULTIPOINT": 3,
	}
)

func (x OspfNetworkType) Enum() *OspfNetworkType {
	p := new(OspfNetworkType)
	*p = x
	return p
}

func (x OspfNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OspfNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[1].Descriptor()
}

func (OspfNetworkType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[1]
}

func (x OspfNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OspfNetworkType.Descriptor instead.
func (OspfNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{1}
}

type InterfaceOperStatusType int32

const (
	InterfaceOperStatusType_INTERFACE_STATUS_UNKNOWN   InterfaceOperStatusType = 0
	InterfaceOperStatusType_INTERFACE_STATUS_OPER_UP   InterfaceOperStatusType = 1
	InterfaceOperStatusType_INTERFACE_STATUS_OPER_DOWN InterfaceOperStatusType = 2
	InterfaceOperStatusType_INTERFACE_STATUS_ERROR     InterfaceOperStatusType = 3
)

// Enum value maps for InterfaceOperStatusType.
var (
	InterfaceOperStatusType_name = map[int32]string{
		0: "INTERFACE_STATUS_UNKNOWN",
		1: "INTERFACE_STATUS_OPER_UP",
		2: "INTERFACE_STATUS_OPER_DOWN",
		3: "INTERFACE_STATUS_ERROR",
	}
	InterfaceOperStatusType_value = map[string]int32{
		"INTERFACE_STATUS_UNKNOWN":   0,
		"INTERFACE_STATUS_OPER_UP":   1,
		"INTERFACE_STATUS_OPER_DOWN": 2,
		"INTERFACE_STATUS_ERROR":     3,
	}
)

func (x InterfaceOperStatusType) Enum() *InterfaceOperStatusType {
	p := new(InterfaceOperStatusType)
	*p = x
	return p
}

func (x InterfaceOperStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceOperStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[2].Descriptor()
}

func (InterfaceOperStatusType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[2]
}

func (x InterfaceOperStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceOperStatusType.Descriptor instead.
func (InterfaceOperStatusType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{2}
}

type InterfaceAdminStatusType int32

const (
	InterfaceAdminStatusType_INTERFACE_ADMIN_STATUS_UNKNOWN InterfaceAdminStatusType = 0
	InterfaceAdminStatusType_INTERFACE_ADMIN_STATUS_UP      InterfaceAdminStatusType = 1
	InterfaceAdminStatusType_INTERFACE_ADMIN_STATUS_DOWN    InterfaceAdminStatusType = 2
)

// Enum value maps for InterfaceAdminStatusType.
var (
	InterfaceAdminStatusType_name = map[int32]string{
		0: "INTERFACE_ADMIN_STATUS_UNKNOWN",
		1: "INTERFACE_ADMIN_STATUS_UP",
		2: "INTERFACE_ADMIN_STATUS_DOWN",
	}
	InterfaceAdminStatusType_value = map[string]int32{
		"INTERFACE_ADMIN_STATUS_UNKNOWN": 0,
		"INTERFACE_ADMIN_STATUS_UP":      1,
		"INTERFACE_ADMIN_STATUS_DOWN":    2,
	}
)

func (x InterfaceAdminStatusType) Enum() *InterfaceAdminStatusType {
	p := new(InterfaceAdminStatusType)
	*p = x
	return p
}

func (x InterfaceAdminStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceAdminStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[3].Descriptor()
}

func (InterfaceAdminStatusType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[3]
}

func (x InterfaceAdminStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceAdminStatusType.Descriptor instead.
func (InterfaceAdminStatusType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{3}
}

// TODO: Consider adding additional states such as FRR_STATUS_STARTING, FRR_STATUS_STOPPING,
// or other states that might be relevant for tracking the lifecycle of FRR processes.
type ZebraStatusType int32

const (
	ZebraStatusType_ZEBRA_STATUS_NOT_CONNECTED ZebraStatusType = 0
	ZebraStatusType_ZEBRA_STATUS_CONNECTED     ZebraStatusType = 1
)

// Enum value maps for ZebraStatusType.
var (
	ZebraStatusType_name = map[int32]string{
		0: "ZEBRA_STATUS_NOT_CONNECTED",
		1: "ZEBRA_STATUS_CONNECTED",
	}
	ZebraStatusType_value = map[string]int32{
		"ZEBRA_STATUS_NOT_CONNECTED": 0,
		"ZEBRA_STATUS_CONNECTED":     1,
	}
)

func (x ZebraStatusType) Enum() *ZebraStatusType {
	p := new(ZebraStatusType)
	*p = x
	return p
}

func (x ZebraStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZebraStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[4].Descriptor()
}

func (ZebraStatusType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[4]
}

func (x ZebraStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZebraStatusType.Descriptor instead.
func (ZebraStatusType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{4}
}

type FrrAgentStatusType int32

const (
	FrrAgentStatusType_FRR_AGENT_STATUS_NOT_CONNECTED FrrAgentStatusType = 0
	FrrAgentStatusType_FRR_AGENT_STATUS_CONNECTED     FrrAgentStatusType = 1
)

// Enum value maps for FrrAgentStatusType.
var (
	FrrAgentStatusType_name = map[int32]string{
		0: "FRR_AGENT_STATUS_NOT_CONNECTED",
		1: "FRR_AGENT_STATUS_CONNECTED",
	}
	FrrAgentStatusType_value = map[string]int32{
		"FRR_AGENT_STATUS_NOT_CONNECTED": 0,
		"FRR_AGENT_STATUS_CONNECTED":     1,
	}
)

func (x FrrAgentStatusType) Enum() *FrrAgentStatusType {
	p := new(FrrAgentStatusType)
	*p = x
	return p
}

func (x FrrAgentStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrrAgentStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[5].Descriptor()
}

func (FrrAgentStatusType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[5]
}

func (x FrrAgentStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrrAgentStatusType.Descriptor instead.
func (FrrAgentStatusType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{5}
}

type DataplaneStatusType int32

const (
	DataplaneStatusType_DATAPLANE_STATUS_UNKNOWN DataplaneStatusType = 0
	DataplaneStatusType_DATAPLANE_STATUS_HEALTHY DataplaneStatusType = 1
	DataplaneStatusType_DATAPLANE_STATUS_INIT    DataplaneStatusType = 2
	DataplaneStatusType_DATAPLANE_STATUS_ERROR   DataplaneStatusType = 3
)

// Enum value maps for DataplaneStatusType.
var (
	DataplaneStatusType_name = map[int32]string{
		0: "DATAPLANE_STATUS_UNKNOWN",
		1: "DATAPLANE_STATUS_HEALTHY",
		2: "DATAPLANE_STATUS_INIT",
		3: "DATAPLANE_STATUS_ERROR",
	}
	DataplaneStatusType_value = map[string]int32{
		"DATAPLANE_STATUS_UNKNOWN": 0,
		"DATAPLANE_STATUS_HEALTHY": 1,
		"DATAPLANE_STATUS_INIT":    2,
		"DATAPLANE_STATUS_ERROR":   3,
	}
)

func (x DataplaneStatusType) Enum() *DataplaneStatusType {
	p := new(DataplaneStatusType)
	*p = x
	return p
}

func (x DataplaneStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataplaneStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[6].Descriptor()
}

func (DataplaneStatusType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[6]
}

func (x DataplaneStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataplaneStatusType.Descriptor instead.
func (DataplaneStatusType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{6}
}

type BgpNeighborSessionState int32

const (
	BgpNeighborSessionState_BGP_STATE_UNSET       BgpNeighborSessionState = 0
	BgpNeighborSessionState_BGP_STATE_IDLE        BgpNeighborSessionState = 1
	BgpNeighborSessionState_BGP_STATE_CONNECT     BgpNeighborSessionState = 2
	BgpNeighborSessionState_BGP_STATE_ACTIVE      BgpNeighborSessionState = 3
	BgpNeighborSessionState_BGP_STATE_OPEN        BgpNeighborSessionState = 4
	BgpNeighborSessionState_BGP_STATE_ESTABLISHED BgpNeighborSessionState = 5
)

// Enum value maps for BgpNeighborSessionState.
var (
	BgpNeighborSessionState_name = map[int32]string{
		0: "BGP_STATE_UNSET",
		1: "BGP_STATE_IDLE",
		2: "BGP_STATE_CONNECT",
		3: "BGP_STATE_ACTIVE",
		4: "BGP_STATE_OPEN",
		5: "BGP_STATE_ESTABLISHED",
	}
	BgpNeighborSessionState_value = map[string]int32{
		"BGP_STATE_UNSET":       0,
		"BGP_STATE_IDLE":        1,
		"BGP_STATE_CONNECT":     2,
		"BGP_STATE_ACTIVE":      3,
		"BGP_STATE_OPEN":        4,
		"BGP_STATE_ESTABLISHED": 5,
	}
)

func (x BgpNeighborSessionState) Enum() *BgpNeighborSessionState {
	p := new(BgpNeighborSessionState)
	*p = x
	return p
}

func (x BgpNeighborSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpNeighborSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[7].Descriptor()
}

func (BgpNeighborSessionState) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[7]
}

func (x BgpNeighborSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpNeighborSessionState.Descriptor instead.
func (BgpNeighborSessionState) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{7}
}

// Defines interface representation on the Gateway
type IfType int32

const (
	IfType_IF_TYPE_ETHERNET IfType = 0
	IfType_IF_TYPE_VLAN     IfType = 1
	IfType_IF_TYPE_LOOPBACK IfType = 2
	IfType_IF_TYPE_VTEP     IfType = 3
)

// Enum value maps for IfType.
var (
	IfType_name = map[int32]string{
		0: "IF_TYPE_ETHERNET",
		1: "IF_TYPE_VLAN",
		2: "IF_TYPE_LOOPBACK",
		3: "IF_TYPE_VTEP",
	}
	IfType_value = map[string]int32{
		"IF_TYPE_ETHERNET": 0,
		"IF_TYPE_VLAN":     1,
		"IF_TYPE_LOOPBACK": 2,
		"IF_TYPE_VTEP":     3,
	}
)

func (x IfType) Enum() *IfType {
	p := new(IfType)
	*p = x
	return p
}

func (x IfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[8].Descriptor()
}

func (IfType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[8]
}

func (x IfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfType.Descriptor instead.
func (IfType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{8}
}

// For physical interface - fabric-facing or external-facing
type IfRole int32

const (
	IfRole_IF_ROLE_FABRIC   IfRole = 0
	IfRole_IF_ROLE_EXTERNAL IfRole = 1
)

// Enum value maps for IfRole.
var (
	IfRole_name = map[int32]string{
		0: "IF_ROLE_FABRIC",
		1: "IF_ROLE_EXTERNAL",
	}
	IfRole_value = map[string]int32{
		"IF_ROLE_FABRIC":   0,
		"IF_ROLE_EXTERNAL": 1,
	}
)

func (x IfRole) Enum() *IfRole {
	p := new(IfRole)
	*p = x
	return p
}

func (x IfRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[9].Descriptor()
}

func (IfRole) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[9]
}

func (x IfRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfRole.Descriptor instead.
func (IfRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{9}
}

// AFIs supported for BGP peering
type BgpAF int32

const (
	BgpAF_IPV4_UNICAST BgpAF = 0
	BgpAF_IPV6_UNICAST BgpAF = 1
	BgpAF_L2VPN_EVPN   BgpAF = 2
)

// Enum value maps for BgpAF.
var (
	BgpAF_name = map[int32]string{
		0: "IPV4_UNICAST",
		1: "IPV6_UNICAST",
		2: "L2VPN_EVPN",
	}
	BgpAF_value = map[string]int32{
		"IPV4_UNICAST": 0,
		"IPV6_UNICAST": 1,
		"L2VPN_EVPN":   2,
	}
)

func (x BgpAF) Enum() *BgpAF {
	p := new(BgpAF)
	*p = x
	return p
}

func (x BgpAF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAF) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[10].Descriptor()
}

func (BgpAF) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[10]
}

func (x BgpAF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAF.Descriptor instead.
func (BgpAF) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{10}
}

// Log-level for dataplane and DPDK
type LogLevel int32

const (
	LogLevel_OFF     LogLevel = 0
	LogLevel_ERROR   LogLevel = 1
	LogLevel_WARNING LogLevel = 2
	LogLevel_INFO    LogLevel = 3
	LogLevel_DEBUG   LogLevel = 4
	LogLevel_TRACE   LogLevel = 5
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "OFF",
		1: "ERROR",
		2: "WARNING",
		3: "INFO",
		4: "DEBUG",
		5: "TRACE",
	}
	LogLevel_value = map[string]int32{
		"OFF":     0,
		"ERROR":   1,
		"WARNING": 2,
		"INFO":    3,
		"DEBUG":   4,
		"TRACE":   5,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[11].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[11]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{11}
}

// Backend driver for packet processing
type PacketDriver int32

const (
	PacketDriver_KERNEL PacketDriver = 0
	PacketDriver_DPDK   PacketDriver = 1
)

// Enum value maps for PacketDriver.
var (
	PacketDriver_name = map[int32]string{
		0: "KERNEL",
		1: "DPDK",
	}
	PacketDriver_value = map[string]int32{
		"KERNEL": 0,
		"DPDK":   1,
	}
)

func (x PacketDriver) Enum() *PacketDriver {
	p := new(PacketDriver)
	*p = x
	return p
}

func (x PacketDriver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketDriver) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[12].Descriptor()
}

func (PacketDriver) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[12]
}

func (x PacketDriver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketDriver.Descriptor instead.
func (PacketDriver) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{12}
}

type GetConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{0}
}

type UpdateConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *GatewayConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateConfigRequest) GetConfig() *GatewayConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         Error                  `protobuf:"varint,1,opt,name=error,proto3,enum=config.Error" json:"error,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	mi := &file_proto_dataplane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateConfigResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_ERROR_NONE
}

func (x *UpdateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetConfigGenerationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigGenerationRequest) Reset() {
	*x = GetConfigGenerationRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigGenerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigGenerationRequest) ProtoMessage() {}

func (x *GetConfigGenerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigGenerationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigGenerationRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{3}
}

type GetConfigGenerationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    int64                  `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigGenerationResponse) Reset() {
	*x = GetConfigGenerationResponse{}
	mi := &file_proto_dataplane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigGenerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigGenerationResponse) ProtoMessage() {}

func (x *GetConfigGenerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigGenerationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigGenerationResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{4}
}

func (x *GetConfigGenerationResponse) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

// OSPF Interface configuration
type OspfInterface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Passive       bool                   `protobuf:"varint,1,opt,name=passive,proto3" json:"passive,omitempty"`
	Area          string                 `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty"`
	Cost          *uint32                `protobuf:"varint,3,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
	NetworkType   *OspfNetworkType       `protobuf:"varint,4,opt,name=network_type,json=networkType,proto3,enum=config.OspfNetworkType,oneof" json:"network_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfInterface) Reset() {
	*x = OspfInterface{}
	mi := &file_proto_dataplane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfInterface) ProtoMessage() {}

func (x *OspfInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfInterface.ProtoReflect.Descriptor instead.
func (*OspfInterface) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{5}
}

func (x *OspfInterface) GetPassive() bool {
	if x != nil {
		return x.Passive
	}
	return false
}

func (x *OspfInterface) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *OspfInterface) GetCost() uint32 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *OspfInterface) GetNetworkType() OspfNetworkType {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return OspfNetworkType_BROADCAST
}

// OSPF process configuration
type OspfConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RouterId      string                 `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Vrf           *string                `protobuf:"bytes,2,opt,name=vrf,proto3,oneof" json:"vrf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OspfConfig) Reset() {
	*x = OspfConfig{}
	mi := &file_proto_dataplane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OspfConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfConfig) ProtoMessage() {}

func (x *OspfConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfConfig.ProtoReflect.Descriptor instead.
func (*OspfConfig) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{6}
}

func (x *OspfConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *OspfConfig) GetVrf() string {
	if x != nil && x.Vrf != nil {
		return *x.Vrf
	}
	return ""
}

type GetDataplaneStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDataplaneStatusRequest) Reset() {
	*x = GetDataplaneStatusRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataplaneStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataplaneStatusRequest) ProtoMessage() {}

func (x *GetDataplaneStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataplaneStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDataplaneStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{7}
}

// TODO: Consider adding an optional string field to InterfaceStatus for additional error messages or descriptions.
type InterfaceStatus struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Ifname        string                   `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	OperStatus    InterfaceOperStatusType  `protobuf:"varint,2,opt,name=oper_status,json=operStatus,proto3,enum=config.InterfaceOperStatusType" json:"oper_status,omitempty"`
	AdminStatus   InterfaceAdminStatusType `protobuf:"varint,3,opt,name=admin_status,json=adminStatus,proto3,enum=config.InterfaceAdminStatusType" json:"admin_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceStatus) Reset() {
	*x = InterfaceStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStatus) ProtoMessage() {}

func (x *InterfaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStatus.ProtoReflect.Descriptor instead.
func (*InterfaceStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{8}
}

func (x *InterfaceStatus) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *InterfaceStatus) GetOperStatus() InterfaceOperStatusType {
	if x != nil {
		return x.OperStatus
	}
	return InterfaceOperStatusType_INTERFACE_STATUS_UNKNOWN
}

func (x *InterfaceStatus) GetAdminStatus() InterfaceAdminStatusType {
	if x != nil {
		return x.AdminStatus
	}
	return InterfaceAdminStatusType_INTERFACE_ADMIN_STATUS_UNKNOWN
}

type FrrStatus struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ZebraStatus      ZebraStatusType        `protobuf:"varint,1,opt,name=zebra_status,json=zebraStatus,proto3,enum=config.ZebraStatusType" json:"zebra_status,omitempty"`
	FrrAgentStatus   FrrAgentStatusType     `protobuf:"varint,2,opt,name=frr_agent_status,json=frrAgentStatus,proto3,enum=config.FrrAgentStatusType" json:"frr_agent_status,omitempty"`
	AppliedConfigGen int64                  `protobuf:"varint,3,opt,name=applied_config_gen,json=appliedConfigGen,proto3" json:"applied_config_gen,omitempty"`
	Restarts         uint32                 `protobuf:"varint,4,opt,name=restarts,proto3" json:"restarts,omitempty"`
	AppliedConfigs   uint32                 `protobuf:"varint,5,opt,name=applied_configs,json=appliedConfigs,proto3" json:"applied_configs,omitempty"`
	FailedConfigs    uint32                 `protobuf:"varint,6,opt,name=failed_configs,json=failedConfigs,proto3" json:"failed_configs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FrrStatus) Reset() {
	*x = FrrStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrrStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrrStatus) ProtoMessage() {}

func (x *FrrStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrrStatus.ProtoReflect.Descriptor instead.
func (*FrrStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{9}
}

func (x *FrrStatus) GetZebraStatus() ZebraStatusType {
	if x != nil {
		return x.ZebraStatus
	}
	return ZebraStatusType_ZEBRA_STATUS_NOT_CONNECTED
}

func (x *FrrStatus) GetFrrAgentStatus() FrrAgentStatusType {
	if x != nil {
		return x.FrrAgentStatus
	}
	return FrrAgentStatusType_FRR_AGENT_STATUS_NOT_CONNECTED
}

func (x *FrrStatus) GetAppliedConfigGen() int64 {
	if x != nil {
		return x.AppliedConfigGen
	}
	return 0
}

func (x *FrrStatus) GetRestarts() uint32 {
	if x != nil {
		return x.Restarts
	}
	return 0
}

func (x *FrrStatus) GetAppliedConfigs() uint32 {
	if x != nil {
		return x.AppliedConfigs
	}
	return 0
}

func (x *FrrStatus) GetFailedConfigs() uint32 {
	if x != nil {
		return x.FailedConfigs
	}
	return 0
}

type DataplaneStatusInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        DataplaneStatusType    `protobuf:"varint,1,opt,name=status,proto3,enum=config.DataplaneStatusType" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataplaneStatusInfo) Reset() {
	*x = DataplaneStatusInfo{}
	mi := &file_proto_dataplane_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataplaneStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataplaneStatusInfo) ProtoMessage() {}

func (x *DataplaneStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataplaneStatusInfo.ProtoReflect.Descriptor instead.
func (*DataplaneStatusInfo) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{10}
}

func (x *DataplaneStatusInfo) GetStatus() DataplaneStatusType {
	if x != nil {
		return x.Status
	}
	return DataplaneStatusType_DATAPLANE_STATUS_UNKNOWN
}

type InterfaceCounters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxBits        uint64                 `protobuf:"varint,1,opt,name=tx_bits,json=txBits,proto3" json:"tx_bits,omitempty"`
	TxBps         float64                `protobuf:"fixed64,2,opt,name=tx_bps,json=txBps,proto3" json:"tx_bps,omitempty"`
	TxErrors      uint64                 `protobuf:"varint,3,opt,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
	RxBits        uint64                 `protobuf:"varint,4,opt,name=rx_bits,json=rxBits,proto3" json:"rx_bits,omitempty"`
	RxBps         float64                `protobuf:"fixed64,5,opt,name=rx_bps,json=rxBps,proto3" json:"rx_bps,omitempty"`
	RxErrors      uint64                 `protobuf:"varint,6,opt,name=rx_errors,json=rxErrors,proto3" json:"rx_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceCounters) Reset() {
	*x = InterfaceCounters{}
	mi := &file_proto_dataplane_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceCounters) ProtoMessage() {}

func (x *InterfaceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceCounters.ProtoReflect.Descriptor instead.
func (*InterfaceCounters) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{11}
}

func (x *InterfaceCounters) GetTxBits() uint64 {
	if x != nil {
		return x.TxBits
	}
	return 0
}

func (x *InterfaceCounters) GetTxBps() float64 {
	if x != nil {
		return x.TxBps
	}
	return 0
}

func (x *InterfaceCounters) GetTxErrors() uint64 {
	if x != nil {
		return x.TxErrors
	}
	return 0
}

func (x *InterfaceCounters) GetRxBits() uint64 {
	if x != nil {
		return x.RxBits
	}
	return 0
}

func (x *InterfaceCounters) GetRxBps() float64 {
	if x != nil {
		return x.RxBps
	}
	return 0
}

func (x *InterfaceCounters) GetRxErrors() uint64 {
	if x != nil {
		return x.RxErrors
	}
	return 0
}

type InterfaceRuntimeStatus struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	AdminStatus   InterfaceAdminStatusType `protobuf:"varint,1,opt,name=admin_status,json=adminStatus,proto3,enum=config.InterfaceAdminStatusType" json:"admin_status,omitempty"`
	OperStatus    InterfaceOperStatusType  `protobuf:"varint,2,opt,name=oper_status,json=operStatus,proto3,enum=config.InterfaceOperStatusType" json:"oper_status,omitempty"`
	Mac           string                   `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Mtu           uint32                   `protobuf:"varint,4,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Counters      *InterfaceCounters       `protobuf:"bytes,5,opt,name=counters,proto3" json:"counters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceRuntimeStatus) Reset() {
	*x = InterfaceRuntimeStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceRuntimeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceRuntimeStatus) ProtoMessage() {}

func (x *InterfaceRuntimeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceRuntimeStatus.ProtoReflect.Descriptor instead.
func (*InterfaceRuntimeStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{12}
}

func (x *InterfaceRuntimeStatus) GetAdminStatus() InterfaceAdminStatusType {
	if x != nil {
		return x.AdminStatus
	}
	return InterfaceAdminStatusType_INTERFACE_ADMIN_STATUS_UNKNOWN
}

func (x *InterfaceRuntimeStatus) GetOperStatus() InterfaceOperStatusType {
	if x != nil {
		return x.OperStatus
	}
	return InterfaceOperStatusType_INTERFACE_STATUS_UNKNOWN
}

func (x *InterfaceRuntimeStatus) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *InterfaceRuntimeStatus) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *InterfaceRuntimeStatus) GetCounters() *InterfaceCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type BgpMessageCounters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Capability    uint64                 `protobuf:"varint,1,opt,name=capability,proto3" json:"capability,omitempty"`
	Keepalive     uint64                 `protobuf:"varint,2,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	Notification  uint64                 `protobuf:"varint,3,opt,name=notification,proto3" json:"notification,omitempty"`
	Open          uint64                 `protobuf:"varint,4,opt,name=open,proto3" json:"open,omitempty"`
	RouteRefresh  uint64                 `protobuf:"varint,5,opt,name=route_refresh,json=routeRefresh,proto3" json:"route_refresh,omitempty"`
	Update        uint64                 `protobuf:"varint,6,opt,name=update,proto3" json:"update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpMessageCounters) Reset() {
	*x = BgpMessageCounters{}
	mi := &file_proto_dataplane_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMessageCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMessageCounters) ProtoMessage() {}

func (x *BgpMessageCounters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMessageCounters.ProtoReflect.Descriptor instead.
func (*BgpMessageCounters) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{13}
}

func (x *BgpMessageCounters) GetCapability() uint64 {
	if x != nil {
		return x.Capability
	}
	return 0
}

func (x *BgpMessageCounters) GetKeepalive() uint64 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *BgpMessageCounters) GetNotification() uint64 {
	if x != nil {
		return x.Notification
	}
	return 0
}

func (x *BgpMessageCounters) GetOpen() uint64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *BgpMessageCounters) GetRouteRefresh() uint64 {
	if x != nil {
		return x.RouteRefresh
	}
	return 0
}

func (x *BgpMessageCounters) GetUpdate() uint64 {
	if x != nil {
		return x.Update
	}
	return 0
}

type BgpMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      *BgpMessageCounters    `protobuf:"bytes,1,opt,name=received,proto3" json:"received,omitempty"`
	Sent          *BgpMessageCounters    `protobuf:"bytes,2,opt,name=sent,proto3" json:"sent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpMessages) Reset() {
	*x = BgpMessages{}
	mi := &file_proto_dataplane_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMessages) ProtoMessage() {}

func (x *BgpMessages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMessages.ProtoReflect.Descriptor instead.
func (*BgpMessages) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{14}
}

func (x *BgpMessages) GetReceived() *BgpMessageCounters {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *BgpMessages) GetSent() *BgpMessageCounters {
	if x != nil {
		return x.Sent
	}
	return nil
}

type BgpNeighborPrefixes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Received          uint32                 `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	ReceivedPrePolicy uint32                 `protobuf:"varint,2,opt,name=received_pre_policy,json=receivedPrePolicy,proto3" json:"received_pre_policy,omitempty"`
	Sent              uint32                 `protobuf:"varint,3,opt,name=sent,proto3" json:"sent,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BgpNeighborPrefixes) Reset() {
	*x = BgpNeighborPrefixes{}
	mi := &file_proto_dataplane_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborPrefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborPrefixes) ProtoMessage() {}

func (x *BgpNeighborPrefixes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborPrefixes.ProtoReflect.Descriptor instead.
func (*BgpNeighborPrefixes) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{15}
}

func (x *BgpNeighborPrefixes) GetReceived() uint32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *BgpNeighborPrefixes) GetReceivedPrePolicy() uint32 {
	if x != nil {
		return x.ReceivedPrePolicy
	}
	return 0
}

func (x *BgpNeighborPrefixes) GetSent() uint32 {
	if x != nil {
		return x.Sent
	}
	return 0
}

type BgpNeighborStatus struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	Enabled                bool                    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LocalAs                uint32                  `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	PeerAs                 uint32                  `protobuf:"varint,3,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	PeerPort               uint32                  `protobuf:"varint,4,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`
	PeerGroup              string                  `protobuf:"bytes,5,opt,name=peer_group,json=peerGroup,proto3" json:"peer_group,omitempty"`
	RemoteRouterId         string                  `protobuf:"bytes,6,opt,name=remote_router_id,json=remoteRouterId,proto3" json:"remote_router_id,omitempty"`
	SessionState           BgpNeighborSessionState `protobuf:"varint,7,opt,name=session_state,json=sessionState,proto3,enum=config.BgpNeighborSessionState" json:"session_state,omitempty"`
	ConnectionsDropped     uint64                  `protobuf:"varint,8,opt,name=connections_dropped,json=connectionsDropped,proto3" json:"connections_dropped,omitempty"`
	EstablishedTransitions uint64                  `protobuf:"varint,9,opt,name=established_transitions,json=establishedTransitions,proto3" json:"established_transitions,omitempty"`
	LastResetReason        string                  `protobuf:"bytes,10,opt,name=last_reset_reason,json=lastResetReason,proto3" json:"last_reset_reason,omitempty"`
	Messages               *BgpMessages            `protobuf:"bytes,11,opt,name=messages,proto3" json:"messages,omitempty"`
	Ipv4UnicastPrefixes    *BgpNeighborPrefixes    `protobuf:"bytes,12,opt,name=ipv4_unicast_prefixes,json=ipv4UnicastPrefixes,proto3" json:"ipv4_unicast_prefixes,omitempty"`
	Ipv6UnicastPrefixes    *BgpNeighborPrefixes    `protobuf:"bytes,13,opt,name=ipv6_unicast_prefixes,json=ipv6UnicastPrefixes,proto3" json:"ipv6_unicast_prefixes,omitempty"`
	L2VpnEvpnPrefixes      *BgpNeighborPrefixes    `protobuf:"bytes,14,opt,name=l2vpn_evpn_prefixes,json=l2vpnEvpnPrefixes,proto3" json:"l2vpn_evpn_prefixes,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BgpNeighborStatus) Reset() {
	*x = BgpNeighborStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborStatus) ProtoMessage() {}

func (x *BgpNeighborStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborStatus.ProtoReflect.Descriptor instead.
func (*BgpNeighborStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{16}
}

func (x *BgpNeighborStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpNeighborStatus) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpNeighborStatus) GetPeerAs() uint32 {
	if x != nil {
		return x.PeerAs
	}
	return 0
}

func (x *BgpNeighborStatus) GetPeerPort() uint32 {
	if x != nil {
		return x.PeerPort
	}
	return 0
}

func (x *BgpNeighborStatus) GetPeerGroup() string {
	if x != nil {
		return x.PeerGroup
	}
	return ""
}

func (x *BgpNeighborStatus) GetRemoteRouterId() string {
	if x != nil {
		return x.RemoteRouterId
	}
	return ""
}

func (x *BgpNeighborStatus) GetSessionState() BgpNeighborSessionState {
	if x != nil {
		return x.SessionState
	}
	return BgpNeighborSessionState_BGP_STATE_UNSET
}

func (x *BgpNeighborStatus) GetConnectionsDropped() uint64 {
	if x != nil {
		return x.ConnectionsDropped
	}
	return 0
}

func (x *BgpNeighborStatus) GetEstablishedTransitions() uint64 {
	if x != nil {
		return x.EstablishedTransitions
	}
	return 0
}

func (x *BgpNeighborStatus) GetLastResetReason() string {
	if x != nil {
		return x.LastResetReason
	}
	return ""
}

func (x *BgpNeighborStatus) GetMessages() *BgpMessages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *BgpNeighborStatus) GetIpv4UnicastPrefixes() *BgpNeighborPrefixes {
	if x != nil {
		return x.Ipv4UnicastPrefixes
	}
	return nil
}

func (x *BgpNeighborStatus) GetIpv6UnicastPrefixes() *BgpNeighborPrefixes {
	if x != nil {
		return x.Ipv6UnicastPrefixes
	}
	return nil
}

func (x *BgpNeighborStatus) GetL2VpnEvpnPrefixes() *BgpNeighborPrefixes {
	if x != nil {
		return x.L2VpnEvpnPrefixes
	}
	return nil
}

type BgpVrfStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key: neighbor address (IP string)
	Neighbors     map[string]*BgpNeighborStatus `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpVrfStatus) Reset() {
	*x = BgpVrfStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpVrfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpVrfStatus) ProtoMessage() {}

func (x *BgpVrfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpVrfStatus.ProtoReflect.Descriptor instead.
func (*BgpVrfStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{17}
}

func (x *BgpVrfStatus) GetNeighbors() map[string]*BgpNeighborStatus {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type BgpStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key: VRF name
	Vrfs          map[string]*BgpVrfStatus `protobuf:"bytes,1,rep,name=vrfs,proto3" json:"vrfs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpStatus) Reset() {
	*x = BgpStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatus) ProtoMessage() {}

func (x *BgpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatus.ProtoReflect.Descriptor instead.
func (*BgpStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{18}
}

func (x *BgpStatus) GetVrfs() map[string]*BgpVrfStatus {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

type VpcInterfaceStatus struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Ifname        string                   `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	AdminStatus   InterfaceAdminStatusType `protobuf:"varint,2,opt,name=admin_status,json=adminStatus,proto3,enum=config.InterfaceAdminStatusType" json:"admin_status,omitempty"`
	OperStatus    InterfaceOperStatusType  `protobuf:"varint,3,opt,name=oper_status,json=operStatus,proto3,enum=config.InterfaceOperStatusType" json:"oper_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpcInterfaceStatus) Reset() {
	*x = VpcInterfaceStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpcInterfaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcInterfaceStatus) ProtoMessage() {}

func (x *VpcInterfaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcInterfaceStatus.ProtoReflect.Descriptor instead.
func (*VpcInterfaceStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{19}
}

func (x *VpcInterfaceStatus) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *VpcInterfaceStatus) GetAdminStatus() InterfaceAdminStatusType {
	if x != nil {
		return x.AdminStatus
	}
	return InterfaceAdminStatusType_INTERFACE_ADMIN_STATUS_UNKNOWN
}

func (x *VpcInterfaceStatus) GetOperStatus() InterfaceOperStatusType {
	if x != nil {
		return x.OperStatus
	}
	return InterfaceOperStatusType_INTERFACE_STATUS_UNKNOWN
}

type VpcStatus struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // matches VPC.id
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // matches VPC.name
	Vni        uint32                 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	RouteCount uint32                 `protobuf:"varint,4,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"` // routes inside AF_UNICAST, TODO: add more later
	// key: interface name
	Interfaces    map[string]*VpcInterfaceStatus `protobuf:"bytes,7,rep,name=interfaces,proto3" json:"interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpcStatus) Reset() {
	*x = VpcStatus{}
	mi := &file_proto_dataplane_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcStatus) ProtoMessage() {}

func (x *VpcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcStatus.ProtoReflect.Descriptor instead.
func (*VpcStatus) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{20}
}

func (x *VpcStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VpcStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpcStatus) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VpcStatus) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

func (x *VpcStatus) GetInterfaces() map[string]*VpcInterfaceStatus {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type VpcPeeringCounters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SrcVpc        string                 `protobuf:"bytes,2,opt,name=src_vpc,json=srcVpc,proto3" json:"src_vpc,omitempty"`
	DstVpc        string                 `protobuf:"bytes,3,opt,name=dst_vpc,json=dstVpc,proto3" json:"dst_vpc,omitempty"`
	Packets       uint64                 `protobuf:"varint,4,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes         uint64                 `protobuf:"varint,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Drops         uint64                 `protobuf:"varint,6,opt,name=drops,proto3" json:"drops,omitempty"`
	Pps           float64                `protobuf:"fixed64,7,opt,name=pps,proto3" json:"pps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpcPeeringCounters) Reset() {
	*x = VpcPeeringCounters{}
	mi := &file_proto_dataplane_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpcPeeringCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcPeeringCounters) ProtoMessage() {}

func (x *VpcPeeringCounters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcPeeringCounters.ProtoReflect.Descriptor instead.
func (*VpcPeeringCounters) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{21}
}

func (x *VpcPeeringCounters) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpcPeeringCounters) GetSrcVpc() string {
	if x != nil {
		return x.SrcVpc
	}
	return ""
}

func (x *VpcPeeringCounters) GetDstVpc() string {
	if x != nil {
		return x.DstVpc
	}
	return ""
}

func (x *VpcPeeringCounters) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *VpcPeeringCounters) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *VpcPeeringCounters) GetDrops() uint64 {
	if x != nil {
		return x.Drops
	}
	return 0
}

func (x *VpcPeeringCounters) GetPps() float64 {
	if x != nil {
		return x.Pps
	}
	return 0
}

type GetDataplaneStatusResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InterfaceStatuses []*InterfaceStatus     `protobuf:"bytes,1,rep,name=interface_statuses,json=interfaceStatuses,proto3" json:"interface_statuses,omitempty"`
	FrrStatus         *FrrStatus             `protobuf:"bytes,2,opt,name=frr_status,json=frrStatus,proto3" json:"frr_status,omitempty"`
	DataplaneStatus   *DataplaneStatusInfo   `protobuf:"bytes,3,opt,name=dataplane_status,json=dataplaneStatus,proto3" json:"dataplane_status,omitempty"`
	// key: ifname
	InterfaceRuntime map[string]*InterfaceRuntimeStatus `protobuf:"bytes,4,rep,name=interface_runtime,json=interfaceRuntime,proto3" json:"interface_runtime,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Bgp              *BgpStatus                         `protobuf:"bytes,5,opt,name=bgp,proto3" json:"bgp,omitempty"`
	// key: VPC name
	Vpcs map[string]*VpcStatus `protobuf:"bytes,6,rep,name=vpcs,proto3" json:"vpcs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// key: peering name
	VpcPeeringCounters map[string]*VpcPeeringCounters `protobuf:"bytes,7,rep,name=vpc_peering_counters,json=vpcPeeringCounters,proto3" json:"vpc_peering_counters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetDataplaneStatusResponse) Reset() {
	*x = GetDataplaneStatusResponse{}
	mi := &file_proto_dataplane_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataplaneStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataplaneStatusResponse) ProtoMessage() {}

func (x *GetDataplaneStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataplaneStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDataplaneStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{22}
}

func (x *GetDataplaneStatusResponse) GetInterfaceStatuses() []*InterfaceStatus {
	if x != nil {
		return x.InterfaceStatuses
	}
	return nil
}

func (x *GetDataplaneStatusResponse) GetFrrStatus() *FrrStatus {
	if x != nil {
		return x.FrrStatus
	}
	return nil
}

func (x *GetDataplaneStatusResponse) GetDataplaneStatus() *DataplaneStatusInfo {
	if x != nil {
		return x.DataplaneStatus
	}
	return nil
}

func (x *GetDataplaneStatusResponse) GetInterfaceRuntime() map[string]*InterfaceRuntimeStatus {
	if x != nil {
		return x.InterfaceRuntime
	}
	return nil
}

func (x *GetDataplaneStatusResponse) GetBgp() *BgpStatus {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *GetDataplaneStatusResponse) GetVpcs() map[string]*VpcStatus {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *GetDataplaneStatusResponse) GetVpcPeeringCounters() map[string]*VpcPeeringCounters {
	if x != nil {
		return x.VpcPeeringCounters
	}
	return nil
}

// Defines a logical interface. May correlate with physical representation
type Interface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipaddrs       []string               `protobuf:"bytes,2,rep,name=ipaddrs,proto3" json:"ipaddrs,omitempty"`
	Type          IfType                 `protobuf:"varint,3,opt,name=type,proto3,enum=config.IfType" json:"type,omitempty"`
	Role          IfRole                 `protobuf:"varint,4,opt,name=role,proto3,enum=config.IfRole" json:"role,omitempty"`
	Vlan          *uint32                `protobuf:"varint,5,opt,name=vlan,proto3,oneof" json:"vlan,omitempty"`                              // only if VLAN role is defined
	Macaddr       *string                `protobuf:"bytes,6,opt,name=macaddr,proto3,oneof" json:"macaddr,omitempty"`                         // Base MAC address to be used to generate unified MAC for VTEP
	SystemName    *string                `protobuf:"bytes,7,opt,name=system_name,json=systemName,proto3,oneof" json:"system_name,omitempty"` // Parent interface for VLAN devices, only for VLAN role
	Ospf          *OspfInterface         `protobuf:"bytes,8,opt,name=ospf,proto3,oneof" json:"ospf,omitempty"`                               // OSPF interface configuration if enabled
	Mtu           *uint32                `protobuf:"varint,9,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`                                // MTU for the interface
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Interface) Reset() {
	*x = Interface{}
	mi := &file_proto_dataplane_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{23}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetIpaddrs() []string {
	if x != nil {
		return x.Ipaddrs
	}
	return nil
}

func (x *Interface) GetType() IfType {
	if x != nil {
		return x.Type
	}
	return IfType_IF_TYPE_ETHERNET
}

func (x *Interface) GetRole() IfRole {
	if x != nil {
		return x.Role
	}
	return IfRole_IF_ROLE_FABRIC
}

func (x *Interface) GetVlan() uint32 {
	if x != nil && x.Vlan != nil {
		return *x.Vlan
	}
	return 0
}

func (x *Interface) GetMacaddr() string {
	if x != nil && x.Macaddr != nil {
		return *x.Macaddr
	}
	return ""
}

func (x *Interface) GetSystemName() string {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return ""
}

func (x *Interface) GetOspf() *OspfInterface {
	if x != nil {
		return x.Ospf
	}
	return nil
}

func (x *Interface) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

// Defines the list of prefixes that VPCs can expose
type PeeringIPs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*PeeringIPs_Cidr
	//	*PeeringIPs_Not
	Rule          isPeeringIPs_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringIPs) Reset() {
	*x = PeeringIPs{}
	mi := &file_proto_dataplane_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringIPs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringIPs) ProtoMessage() {}

func (x *PeeringIPs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringIPs.ProtoReflect.Descriptor instead.
func (*PeeringIPs) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{24}
}

func (x *PeeringIPs) GetRule() isPeeringIPs_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PeeringIPs) GetCidr() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringIPs_Cidr); ok {
			return x.Cidr
		}
	}
	return ""
}

func (x *PeeringIPs) GetNot() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringIPs_Not); ok {
			return x.Not
		}
	}
	return ""
}

type isPeeringIPs_Rule interface {
	isPeeringIPs_Rule()
}

type PeeringIPs_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type PeeringIPs_Not struct {
	Not string `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

func (*PeeringIPs_Cidr) isPeeringIPs_Rule() {}

func (*PeeringIPs_Not) isPeeringIPs_Rule() {}

// Defines the list of prefixes that exposing IPs will be translated to
type PeeringAs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*PeeringAs_Cidr
	//	*PeeringAs_Not
	Rule          isPeeringAs_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringAs) Reset() {
	*x = PeeringAs{}
	mi := &file_proto_dataplane_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringAs) ProtoMessage() {}

func (x *PeeringAs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringAs.ProtoReflect.Descriptor instead.
func (*PeeringAs) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{25}
}

func (x *PeeringAs) GetRule() isPeeringAs_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PeeringAs) GetCidr() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringAs_Cidr); ok {
			return x.Cidr
		}
	}
	return ""
}

func (x *PeeringAs) GetNot() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringAs_Not); ok {
			return x.Not
		}
	}
	return ""
}

type isPeeringAs_Rule interface {
	isPeeringAs_Rule()
}

type PeeringAs_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type PeeringAs_Not struct {
	Not string `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

func (*PeeringAs_Cidr) isPeeringAs_Rule() {}

func (*PeeringAs_Not) isPeeringAs_Rule() {}

type PeeringStatelessNAT struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringStatelessNAT) Reset() {
	*x = PeeringStatelessNAT{}
	mi := &file_proto_dataplane_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringStatelessNAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringStatelessNAT) ProtoMessage() {}

func (x *PeeringStatelessNAT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringStatelessNAT.ProtoReflect.Descriptor instead.
func (*PeeringStatelessNAT) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{26}
}

type PeeringStatefulNAT struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IdleTimeout   *durationpb.Duration   `protobuf:"bytes,1,opt,name=idleTimeout,proto3" json:"idleTimeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringStatefulNAT) Reset() {
	*x = PeeringStatefulNAT{}
	mi := &file_proto_dataplane_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringStatefulNAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringStatefulNAT) ProtoMessage() {}

func (x *PeeringStatefulNAT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringStatefulNAT.ProtoReflect.Descriptor instead.
func (*PeeringStatefulNAT) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{27}
}

func (x *PeeringStatefulNAT) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

// Defines a rule between exposing IP and translated
type Expose struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Ips   []*PeeringIPs          `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	As    []*PeeringAs           `protobuf:"bytes,2,rep,name=as,proto3" json:"as,omitempty"`
	// Types that are valid to be assigned to Nat:
	//
	//	*Expose_Stateless
	//	*Expose_Stateful
	Nat           isExpose_Nat `protobuf_oneof:"nat"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expose) Reset() {
	*x = Expose{}
	mi := &file_proto_dataplane_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expose) ProtoMessage() {}

func (x *Expose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expose.ProtoReflect.Descriptor instead.
func (*Expose) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{28}
}

func (x *Expose) GetIps() []*PeeringIPs {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *Expose) GetAs() []*PeeringAs {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *Expose) GetNat() isExpose_Nat {
	if x != nil {
		return x.Nat
	}
	return nil
}

func (x *Expose) GetStateless() *PeeringStatelessNAT {
	if x != nil {
		if x, ok := x.Nat.(*Expose_Stateless); ok {
			return x.Stateless
		}
	}
	return nil
}

func (x *Expose) GetStateful() *PeeringStatefulNAT {
	if x != nil {
		if x, ok := x.Nat.(*Expose_Stateful); ok {
			return x.Stateful
		}
	}
	return nil
}

type isExpose_Nat interface {
	isExpose_Nat()
}

type Expose_Stateless struct {
	Stateless *PeeringStatelessNAT `protobuf:"bytes,3,opt,name=stateless,proto3,oneof"`
}

type Expose_Stateful struct {
	Stateful *PeeringStatefulNAT `protobuf:"bytes,4,opt,name=stateful,proto3,oneof"`
}

func (*Expose_Stateless) isExpose_Nat() {}

func (*Expose_Stateful) isExpose_Nat() {}

// Defines a list of exposures per VPC
type PeeringEntryFor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vpc           string                 `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	Expose        []*Expose              `protobuf:"bytes,2,rep,name=expose,proto3" json:"expose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringEntryFor) Reset() {
	*x = PeeringEntryFor{}
	mi := &file_proto_dataplane_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringEntryFor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringEntryFor) ProtoMessage() {}

func (x *PeeringEntryFor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringEntryFor.ProtoReflect.Descriptor instead.
func (*PeeringEntryFor) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{29}
}

func (x *PeeringEntryFor) GetVpc() string {
	if x != nil {
		return x.Vpc
	}
	return ""
}

func (x *PeeringEntryFor) GetExpose() []*Expose {
	if x != nil {
		return x.Expose
	}
	return nil
}

// There can be only one peering per pair of given VPCs
type VpcPeering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // unique: e.g. VPC-1--VPC-2
	For           []*PeeringEntryFor     `protobuf:"bytes,2,rep,name=for,proto3" json:"for,omitempty"`   // it's guaranteed that only two entries are present
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpcPeering) Reset() {
	*x = VpcPeering{}
	mi := &file_proto_dataplane_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpcPeering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcPeering) ProtoMessage() {}

func (x *VpcPeering) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcPeering.ProtoReflect.Descriptor instead.
func (*VpcPeering) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{30}
}

func (x *VpcPeering) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpcPeering) GetFor() []*PeeringEntryFor {
	if x != nil {
		return x.For
	}
	return nil
}

type VPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // unique
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // unique (key)
	Vni           uint32                 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Interfaces    []*Interface           `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC) Reset() {
	*x = VPC{}
	mi := &file_proto_dataplane_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC) ProtoMessage() {}

func (x *VPC) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC.ProtoReflect.Descriptor instead.
func (*VPC) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{31}
}

func (x *VPC) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VPC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VPC) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VPC) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Description of VPCs and Peerings between VPCs
type Overlay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vpcs          []*VPC                 `protobuf:"bytes,1,rep,name=vpcs,proto3" json:"vpcs,omitempty"`
	Peerings      []*VpcPeering          `protobuf:"bytes,2,rep,name=peerings,proto3" json:"peerings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Overlay) Reset() {
	*x = Overlay{}
	mi := &file_proto_dataplane_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overlay) ProtoMessage() {}

func (x *Overlay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overlay.ProtoReflect.Descriptor instead.
func (*Overlay) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{32}
}

func (x *Overlay) GetVpcs() []*VPC {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *Overlay) GetPeerings() []*VpcPeering {
	if x != nil {
		return x.Peerings
	}
	return nil
}

// BGP options for IPv4 UNICAST AFI
type BgpAddressFamilyIPv4 struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RedistributeConnected bool                   `protobuf:"varint,1,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool                   `protobuf:"varint,2,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	Networks              []string               `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BgpAddressFamilyIPv4) Reset() {
	*x = BgpAddressFamilyIPv4{}
	mi := &file_proto_dataplane_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyIPv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyIPv4) ProtoMessage() {}

func (x *BgpAddressFamilyIPv4) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyIPv4.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyIPv4) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{33}
}

func (x *BgpAddressFamilyIPv4) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpAddressFamilyIPv4) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpAddressFamilyIPv4) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

// BGP options for IPv6 UNICAST AFI
type BgpAddressFamilyIPv6 struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RedistributeConnected bool                   `protobuf:"varint,1,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool                   `protobuf:"varint,2,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	Networks              []string               `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BgpAddressFamilyIPv6) Reset() {
	*x = BgpAddressFamilyIPv6{}
	mi := &file_proto_dataplane_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyIPv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyIPv6) ProtoMessage() {}

func (x *BgpAddressFamilyIPv6) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyIPv6.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyIPv6) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{34}
}

func (x *BgpAddressFamilyIPv6) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpAddressFamilyIPv6) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpAddressFamilyIPv6) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

// BGP options for L2VPN EVPN AFI
type BgpAddressFamilyL2VpnEvpn struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AdvertiseAllVni bool                   `protobuf:"varint,1,opt,name=advertise_all_vni,json=advertiseAllVni,proto3" json:"advertise_all_vni,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BgpAddressFamilyL2VpnEvpn) Reset() {
	*x = BgpAddressFamilyL2VpnEvpn{}
	mi := &file_proto_dataplane_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyL2VpnEvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyL2VpnEvpn) ProtoMessage() {}

func (x *BgpAddressFamilyL2VpnEvpn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyL2VpnEvpn.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyL2VpnEvpn) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{35}
}

func (x *BgpAddressFamilyL2VpnEvpn) GetAdvertiseAllVni() bool {
	if x != nil {
		return x.AdvertiseAllVni
	}
	return false
}

type BgpNeighborUpdateSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*BgpNeighborUpdateSource_Address
	//	*BgpNeighborUpdateSource_Interface
	Source        isBgpNeighborUpdateSource_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpNeighborUpdateSource) Reset() {
	*x = BgpNeighborUpdateSource{}
	mi := &file_proto_dataplane_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborUpdateSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborUpdateSource) ProtoMessage() {}

func (x *BgpNeighborUpdateSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborUpdateSource.ProtoReflect.Descriptor instead.
func (*BgpNeighborUpdateSource) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{36}
}

func (x *BgpNeighborUpdateSource) GetSource() isBgpNeighborUpdateSource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BgpNeighborUpdateSource) GetAddress() string {
	if x != nil {
		if x, ok := x.Source.(*BgpNeighborUpdateSource_Address); ok {
			return x.Address
		}
	}
	return ""
}

func (x *BgpNeighborUpdateSource) GetInterface() string {
	if x != nil {
		if x, ok := x.Source.(*BgpNeighborUpdateSource_Interface); ok {
			return x.Interface
		}
	}
	return ""
}

type isBgpNeighborUpdateSource_Source interface {
	isBgpNeighborUpdateSource_Source()
}

type BgpNeighborUpdateSource_Address struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3,oneof"` // ip address
}

type BgpNeighborUpdateSource_Interface struct {
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3,oneof"` // name of interface - typically loopback
}

func (*BgpNeighborUpdateSource_Address) isBgpNeighborUpdateSource_Source() {}

func (*BgpNeighborUpdateSource_Interface) isBgpNeighborUpdateSource_Source() {}

// BGP neighbor config
type BgpNeighbor struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Address       string                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAsn     string                   `protobuf:"bytes,2,opt,name=remote_asn,json=remoteAsn,proto3" json:"remote_asn,omitempty"`
	AfActivate    []BgpAF                  `protobuf:"varint,3,rep,packed,name=af_activate,json=afActivate,proto3,enum=config.BgpAF" json:"af_activate,omitempty"`
	UpdateSource  *BgpNeighborUpdateSource `protobuf:"bytes,4,opt,name=update_source,json=updateSource,proto3" json:"update_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_proto_dataplane_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{37}
}

func (x *BgpNeighbor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAsn() string {
	if x != nil {
		return x.RemoteAsn
	}
	return ""
}

func (x *BgpNeighbor) GetAfActivate() []BgpAF {
	if x != nil {
		return x.AfActivate
	}
	return nil
}

func (x *BgpNeighbor) GetUpdateSource() *BgpNeighborUpdateSource {
	if x != nil {
		return x.UpdateSource
	}
	return nil
}

// IP Prefix filtering route map description
type RouteMap struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MatchPrefixLists []string               `protobuf:"bytes,2,rep,name=match_prefix_lists,json=matchPrefixLists,proto3" json:"match_prefix_lists,omitempty"`
	Action           string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Sequence         uint32                 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RouteMap) Reset() {
	*x = RouteMap{}
	mi := &file_proto_dataplane_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMap) ProtoMessage() {}

func (x *RouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMap.ProtoReflect.Descriptor instead.
func (*RouteMap) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{38}
}

func (x *RouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteMap) GetMatchPrefixLists() []string {
	if x != nil {
		return x.MatchPrefixLists
	}
	return nil
}

func (x *RouteMap) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// BGP Router config description for VRFs
type RouterConfig struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Asn           string                     `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty"`
	RouterId      string                     `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors     []*BgpNeighbor             `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Ipv4Unicast   *BgpAddressFamilyIPv4      `protobuf:"bytes,4,opt,name=ipv4_unicast,json=ipv4Unicast,proto3,oneof" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast   *BgpAddressFamilyIPv6      `protobuf:"bytes,5,opt,name=ipv6_unicast,json=ipv6Unicast,proto3,oneof" json:"ipv6_unicast,omitempty"`
	L2VpnEvpn     *BgpAddressFamilyL2VpnEvpn `protobuf:"bytes,6,opt,name=l2vpn_evpn,json=l2vpnEvpn,proto3,oneof" json:"l2vpn_evpn,omitempty"`
	RouteMaps     []*RouteMap                `protobuf:"bytes,7,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouterConfig) Reset() {
	*x = RouterConfig{}
	mi := &file_proto_dataplane_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfig) ProtoMessage() {}

func (x *RouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfig.ProtoReflect.Descriptor instead.
func (*RouterConfig) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{39}
}

func (x *RouterConfig) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *RouterConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *RouterConfig) GetIpv4Unicast() *BgpAddressFamilyIPv4 {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *RouterConfig) GetIpv6Unicast() *BgpAddressFamilyIPv6 {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *RouterConfig) GetL2VpnEvpn() *BgpAddressFamilyL2VpnEvpn {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

func (x *RouterConfig) GetRouteMaps() []*RouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

// VRF description with list of connected interfaces and its BGP config
type VRF struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interfaces    []*Interface           `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Router        *RouterConfig          `protobuf:"bytes,3,opt,name=router,proto3,oneof" json:"router,omitempty"`
	Ospf          *OspfConfig            `protobuf:"bytes,4,opt,name=ospf,proto3,oneof" json:"ospf,omitempty"` // OSPF process configuration if enabled
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VRF) Reset() {
	*x = VRF{}
	mi := &file_proto_dataplane_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VRF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRF) ProtoMessage() {}

func (x *VRF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRF.ProtoReflect.Descriptor instead.
func (*VRF) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{40}
}

func (x *VRF) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VRF) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *VRF) GetRouter() *RouterConfig {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *VRF) GetOspf() *OspfConfig {
	if x != nil {
		return x.Ospf
	}
	return nil
}

// List of all non-VPC VRFs
type Underlay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vrfs          []*VRF                 `protobuf:"bytes,1,rep,name=vrfs,proto3" json:"vrfs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Underlay) Reset() {
	*x = Underlay{}
	mi := &file_proto_dataplane_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Underlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Underlay) ProtoMessage() {}

func (x *Underlay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Underlay.ProtoReflect.Descriptor instead.
func (*Underlay) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{41}
}

func (x *Underlay) GetVrfs() []*VRF {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

// Defines physical or system-level device
type Ports struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SystemName    string                 `protobuf:"bytes,2,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ports) Reset() {
	*x = Ports{}
	mi := &file_proto_dataplane_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ports) ProtoMessage() {}

func (x *Ports) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ports.ProtoReflect.Descriptor instead.
func (*Ports) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{42}
}

func (x *Ports) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ports) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

// RTE EAL config options for DPDK
type Eal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Eal) Reset() {
	*x = Eal{}
	mi := &file_proto_dataplane_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Eal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eal) ProtoMessage() {}

func (x *Eal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eal.ProtoReflect.Descriptor instead.
func (*Eal) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{43}
}

type TracingConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Default       LogLevel               `protobuf:"varint,1,opt,name=default,proto3,enum=config.LogLevel" json:"default,omitempty"`
	Taglevel      map[string]LogLevel    `protobuf:"bytes,2,rep,name=taglevel,proto3" json:"taglevel,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=config.LogLevel"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracingConfig) Reset() {
	*x = TracingConfig{}
	mi := &file_proto_dataplane_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig) ProtoMessage() {}

func (x *TracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig.ProtoReflect.Descriptor instead.
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{44}
}

func (x *TracingConfig) GetDefault() LogLevel {
	if x != nil {
		return x.Default
	}
	return LogLevel_OFF
}

func (x *TracingConfig) GetTaglevel() map[string]LogLevel {
	if x != nil {
		return x.Taglevel
	}
	return nil
}

// System level config options
type Device struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        PacketDriver           `protobuf:"varint,1,opt,name=driver,proto3,enum=config.PacketDriver" json:"driver,omitempty"`
	Eal           *Eal                   `protobuf:"bytes,2,opt,name=eal,proto3" json:"eal,omitempty"`
	Ports         []*Ports               `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	Hostname      string                 `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Tracing       *TracingConfig         `protobuf:"bytes,5,opt,name=tracing,proto3" json:"tracing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_proto_dataplane_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{45}
}

func (x *Device) GetDriver() PacketDriver {
	if x != nil {
		return x.Driver
	}
	return PacketDriver_KERNEL
}

func (x *Device) GetEal() *Eal {
	if x != nil {
		return x.Eal
	}
	return nil
}

func (x *Device) GetPorts() []*Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Device) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Device) GetTracing() *TracingConfig {
	if x != nil {
		return x.Tracing
	}
	return nil
}

// Complete Gateway config options
type GatewayConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    int64                  `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	Device        *Device                `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Underlay      *Underlay              `protobuf:"bytes,3,opt,name=underlay,proto3" json:"underlay,omitempty"`
	Overlay       *Overlay               `protobuf:"bytes,4,opt,name=overlay,proto3" json:"overlay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayConfig) Reset() {
	*x = GatewayConfig{}
	mi := &file_proto_dataplane_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfig) ProtoMessage() {}

func (x *GatewayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfig.ProtoReflect.Descriptor instead.
func (*GatewayConfig) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{46}
}

func (x *GatewayConfig) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *GatewayConfig) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GatewayConfig) GetUnderlay() *Underlay {
	if x != nil {
		return x.Underlay
	}
	return nil
}

func (x *GatewayConfig) GetOverlay() *Overlay {
	if x != nil {
		return x.Overlay
	}
	return nil
}

var File_proto_dataplane_proto protoreflect.FileDescriptor

const file_proto_dataplane_proto_rawDesc = "" +
	"\n" +
	"\x15proto/dataplane.proto\x12\x06config\x1a\x1egoogle/protobuf/duration.proto\"\x12\n" +
	"\x10GetConfigRequest\"D\n" +
	"\x13UpdateConfigRequest\x12-\n" +
	"\x06config\x18\x01 \x01(\v2\x15.config.GatewayConfigR\x06config\"U\n" +
	"\x14UpdateConfigResponse\x12#\n" +
	"\x05error\x18\x01 \x01(\x0e2\r.config.ErrorR\x05error\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x1c\n" +
	"\x1aGetConfigGenerationRequest\"=\n" +
	"\x1bGetConfigGenerationResponse\x12\x1e\n" +
	"\n" +
	"generation\x18\x01 \x01(\x03R\n" +
	"generation\"\xb1\x01\n" +
	"\rOspfInterface\x12\x18\n" +
	"\apassive\x18\x01 \x01(\bR\apassive\x12\x12\n" +
	"\x04area\x18\x02 \x01(\tR\x04area\x12\x17\n" +
	"\x04cost\x18\x03 \x01(\rH\x00R\x04cost\x88\x01\x01\x12?\n" +
	"\fnetwork_type\x18\x04 \x01(\x0e2\x17.config.OspfNetworkTypeH\x01R\vnetworkType\x88\x01\x01B\a\n" +
	"\x05_costB\x0f\n" +
	"\r_network_type\"H\n" +
	"\n" +
	"OspfConfig\x12\x1b\n" +
	"\trouter_id\x18\x01 \x01(\tR\brouterId\x12\x15\n" +
	"\x03vrf\x18\x02 \x01(\tH\x00R\x03vrf\x88\x01\x01B\x06\n" +
	"\x04_vrf\"\x1b\n" +
	"\x19GetDataplaneStatusRequest\"\xb0\x01\n" +
	"\x0fInterfaceStatus\x12\x16\n" +
	"\x06ifname\x18\x01 \x01(\tR\x06ifname\x12@\n" +
	"\voper_status\x18\x02 \x01(\x0e2\x1f.config.InterfaceOperStatusTypeR\n" +
	"operStatus\x12C\n" +
	"\fadmin_status\x18\x03 \x01(\x0e2 .config.InterfaceAdminStatusTypeR\vadminStatus\"\xa7\x02\n" +
	"\tFrrStatus\x12:\n" +
	"\fzebra_status\x18\x01 \x01(\x0e2\x17.config.ZebraStatusTypeR\vzebraStatus\x12D\n" +
	"\x10frr_agent_status\x18\x02 \x01(\x0e2\x1a.config.FrrAgentStatusTypeR\x0efrrAgentStatus\x12,\n" +
	"\x12applied_config_gen\x18\x03 \x01(\x03R\x10appliedConfigGen\x12\x1a\n" +
	"\brestarts\x18\x04 \x01(\rR\brestarts\x12'\n" +
	"\x0fapplied_configs\x18\x05 \x01(\rR\x0eappliedConfigs\x12%\n" +
	"\x0efailed_configs\x18\x06 \x01(\rR\rfailedConfigs\"J\n" +
	"\x13DataplaneStatusInfo\x123\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1b.config.DataplaneStatusTypeR\x06status\"\xad\x01\n" +
	"\x11InterfaceCounters\x12\x17\n" +
	"\atx_bits\x18\x01 \x01(\x04R\x06txBits\x12\x15\n" +
	"\x06tx_bps\x18\x02 \x01(\x01R\x05txBps\x12\x1b\n" +
	"\ttx_errors\x18\x03 \x01(\x04R\btxErrors\x12\x17\n" +
	"\arx_bits\x18\x04 \x01(\x04R\x06rxBits\x12\x15\n" +
	"\x06rx_bps\x18\x05 \x01(\x01R\x05rxBps\x12\x1b\n" +
	"\trx_errors\x18\x06 \x01(\x04R\brxErrors\"\xfa\x01\n" +
	"\x16InterfaceRuntimeStatus\x12C\n" +
	"\fadmin_status\x18\x01 \x01(\x0e2 .config.InterfaceAdminStatusTypeR\vadminStatus\x12@\n" +
	"\voper_status\x18\x02 \x01(\x0e2\x1f.config.InterfaceOperStatusTypeR\n" +
	"operStatus\x12\x10\n" +
	"\x03mac\x18\x03 \x01(\tR\x03mac\x12\x10\n" +
	"\x03mtu\x18\x04 \x01(\rR\x03mtu\x125\n" +
	"\bcounters\x18\x05 \x01(\v2\x19.config.InterfaceCountersR\bcounters\"\xc7\x01\n" +
	"\x12BgpMessageCounters\x12\x1e\n" +
	"\n" +
	"capability\x18\x01 \x01(\x04R\n" +
	"capability\x12\x1c\n" +
	"\tkeepalive\x18\x02 \x01(\x04R\tkeepalive\x12\"\n" +
	"\fnotification\x18\x03 \x01(\x04R\fnotification\x12\x12\n" +
	"\x04open\x18\x04 \x01(\x04R\x04open\x12#\n" +
	"\rroute_refresh\x18\x05 \x01(\x04R\frouteRefresh\x12\x16\n" +
	"\x06update\x18\x06 \x01(\x04R\x06update\"u\n" +
	"\vBgpMessages\x126\n" +
	"\breceived\x18\x01 \x01(\v2\x1a.config.BgpMessageCountersR\breceived\x12.\n" +
	"\x04sent\x18\x02 \x01(\v2\x1a.config.BgpMessageCountersR\x04sent\"u\n" +
	"\x13BgpNeighborPrefixes\x12\x1a\n" +
	"\breceived\x18\x01 \x01(\rR\breceived\x12.\n" +
	"\x13received_pre_policy\x18\x02 \x01(\rR\x11receivedPrePolicy\x12\x12\n" +
	"\x04sent\x18\x03 \x01(\rR\x04sent\"\xc3\x05\n" +
	"\x11BgpNeighborStatus\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x19\n" +
	"\blocal_as\x18\x02 \x01(\rR\alocalAs\x12\x17\n" +
	"\apeer_as\x18\x03 \x01(\rR\x06peerAs\x12\x1b\n" +
	"\tpeer_port\x18\x04 \x01(\rR\bpeerPort\x12\x1d\n" +
	"\n" +
	"peer_group\x18\x05 \x01(\tR\tpeerGroup\x12(\n" +
	"\x10remote_router_id\x18\x06 \x01(\tR\x0eremoteRouterId\x12D\n" +
	"\rsession_state\x18\a \x01(\x0e2\x1f.config.BgpNeighborSessionStateR\fsessionState\x12/\n" +
	"\x13connections_dropped\x18\b \x01(\x04R\x12connectionsDropped\x127\n" +
	"\x17established_transitions\x18\t \x01(\x04R\x16establishedTransitions\x12*\n" +
	"\x11last_reset_reason\x18\n" +
	" \x01(\tR\x0flastResetReason\x12/\n" +
	"\bmessages\x18\v \x01(\v2\x13.config.BgpMessagesR\bmessages\x12O\n" +
	"\x15ipv4_unicast_prefixes\x18\f \x01(\v2\x1b.config.BgpNeighborPrefixesR\x13ipv4UnicastPrefixes\x12O\n" +
	"\x15ipv6_unicast_prefixes\x18\r \x01(\v2\x1b.config.BgpNeighborPrefixesR\x13ipv6UnicastPrefixes\x12K\n" +
	"\x13l2vpn_evpn_prefixes\x18\x0e \x01(\v2\x1b.config.BgpNeighborPrefixesR\x11l2vpnEvpnPrefixes\"\xaa\x01\n" +
	"\fBgpVrfStatus\x12A\n" +
	"\tneighbors\x18\x01 \x03(\v2#.config.BgpVrfStatus.NeighborsEntryR\tneighbors\x1aW\n" +
	"\x0eNeighborsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.config.BgpNeighborStatusR\x05value:\x028\x01\"\x8b\x01\n" +
	"\tBgpStatus\x12/\n" +
	"\x04vrfs\x18\x01 \x03(\v2\x1b.config.BgpStatus.VrfsEntryR\x04vrfs\x1aM\n" +
	"\tVrfsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.config.BgpVrfStatusR\x05value:\x028\x01\"\xb3\x01\n" +
	"\x12VpcInterfaceStatus\x12\x16\n" +
	"\x06ifname\x18\x01 \x01(\tR\x06ifname\x12C\n" +
	"\fadmin_status\x18\x02 \x01(\x0e2 .config.InterfaceAdminStatusTypeR\vadminStatus\x12@\n" +
	"\voper_status\x18\x03 \x01(\x0e2\x1f.config.InterfaceOperStatusTypeR\n" +
	"operStatus\"\x80\x02\n" +
	"\tVpcStatus\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03vni\x18\x03 \x01(\rR\x03vni\x12\x1f\n" +
	"\vroute_count\x18\x04 \x01(\rR\n" +
	"routeCount\x12A\n" +
	"\n" +
	"interfaces\x18\a \x03(\v2!.config.VpcStatus.InterfacesEntryR\n" +
	"interfaces\x1aY\n" +
	"\x0fInterfacesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.config.VpcInterfaceStatusR\x05value:\x028\x01\"\xb2\x01\n" +
	"\x12VpcPeeringCounters\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x17\n" +
	"\asrc_vpc\x18\x02 \x01(\tR\x06srcVpc\x12\x17\n" +
	"\adst_vpc\x18\x03 \x01(\tR\x06dstVpc\x12\x18\n" +
	"\apackets\x18\x04 \x01(\x04R\apackets\x12\x14\n" +
	"\x05bytes\x18\x05 \x01(\x04R\x05bytes\x12\x14\n" +
	"\x05drops\x18\x06 \x01(\x04R\x05drops\x12\x10\n" +
	"\x03pps\x18\a \x01(\x01R\x03pps\"\xae\x06\n" +
	"\x1aGetDataplaneStatusResponse\x12F\n" +
	"\x12interface_statuses\x18\x01 \x03(\v2\x17.config.InterfaceStatusR\x11interfaceStatuses\x120\n" +
	"\n" +
	"frr_status\x18\x02 \x01(\v2\x11.config.FrrStatusR\tfrrStatus\x12F\n" +
	"\x10dataplane_status\x18\x03 \x01(\v2\x1b.config.DataplaneStatusInfoR\x0fdataplaneStatus\x12e\n" +
	"\x11interface_runtime\x18\x04 \x03(\v28.config.GetDataplaneStatusResponse.InterfaceRuntimeEntryR\x10interfaceRuntime\x12#\n" +
	"\x03bgp\x18\x05 \x01(\v2\x11.config.BgpStatusR\x03bgp\x12@\n" +
	"\x04vpcs\x18\x06 \x03(\v2,.config.GetDataplaneStatusResponse.VpcsEntryR\x04vpcs\x12l\n" +
	"\x14vpc_peering_counters\x18\a \x03(\v2:.config.GetDataplaneStatusResponse.VpcPeeringCountersEntryR\x12vpcPeeringCounters\x1ac\n" +
	"\x15InterfaceRuntimeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.config.InterfaceRuntimeStatusR\x05value:\x028\x01\x1aJ\n" +
	"\tVpcsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.config.VpcStatusR\x05value:\x028\x01\x1aa\n" +
	"\x17VpcPeeringCountersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.config.VpcPeeringCountersR\x05value:\x028\x01\"\xdc\x02\n" +
	"\tInterface\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aipaddrs\x18\x02 \x03(\tR\aipaddrs\x12\"\n" +
	"\x04type\x18\x03 \x01(\x0e2\x0e.config.IfTypeR\x04type\x12\"\n" +
	"\x04role\x18\x04 \x01(\x0e2\x0e.config.IfRoleR\x04role\x12\x17\n" +
	"\x04vlan\x18\x05 \x01(\rH\x00R\x04vlan\x88\x01\x01\x12\x1d\n" +
	"\amacaddr\x18\x06 \x01(\tH\x01R\amacaddr\x88\x01\x01\x12$\n" +
	"\vsystem_name\x18\a \x01(\tH\x02R\n" +
	"systemName\x88\x01\x01\x12.\n" +
	"\x04ospf\x18\b \x01(\v2\x15.config.OspfInterfaceH\x03R\x04ospf\x88\x01\x01\x12\x15\n" +
	"\x03mtu\x18\t \x01(\rH\x04R\x03mtu\x88\x01\x01B\a\n" +
	"\x05_vlanB\n" +
	"\n" +
	"\b_macaddrB\x0e\n" +
	"\f_system_nameB\a\n" +
	"\x05_ospfB\x06\n" +
	"\x04_mtu\">\n" +
	"\n" +
	"PeeringIPs\x12\x14\n" +
	"\x04cidr\x18\x01 \x01(\tH\x00R\x04cidr\x12\x12\n" +
	"\x03not\x18\x02 \x01(\tH\x00R\x03notB\x06\n" +
	"\x04rule\"=\n" +
	"\tPeeringAs\x12\x14\n" +
	"\x04cidr\x18\x01 \x01(\tH\x00R\x04cidr\x12\x12\n" +
	"\x03not\x18\x02 \x01(\tH\x00R\x03notB\x06\n" +
	"\x04rule\"\x15\n" +
	"\x13PeeringStatelessNAT\"Q\n" +
	"\x12PeeringStatefulNAT\x12;\n" +
	"\vidleTimeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\vidleTimeout\"\xcf\x01\n" +
	"\x06Expose\x12$\n" +
	"\x03ips\x18\x01 \x03(\v2\x12.config.PeeringIPsR\x03ips\x12!\n" +
	"\x02as\x18\x02 \x03(\v2\x11.config.PeeringAsR\x02as\x12;\n" +
	"\tstateless\x18\x03 \x01(\v2\x1b.config.PeeringStatelessNATH\x00R\tstateless\x128\n" +
	"\bstateful\x18\x04 \x01(\v2\x1a.config.PeeringStatefulNATH\x00R\bstatefulB\x05\n" +
	"\x03nat\"K\n" +
	"\x0fPeeringEntryFor\x12\x10\n" +
	"\x03vpc\x18\x01 \x01(\tR\x03vpc\x12&\n" +
	"\x06expose\x18\x02 \x03(\v2\x0e.config.ExposeR\x06expose\"K\n" +
	"\n" +
	"VpcPeering\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12)\n" +
	"\x03for\x18\x02 \x03(\v2\x17.config.PeeringEntryForR\x03for\"n\n" +
	"\x03VPC\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03vni\x18\x03 \x01(\rR\x03vni\x121\n" +
	"\n" +
	"interfaces\x18\x04 \x03(\v2\x11.config.InterfaceR\n" +
	"interfaces\"Z\n" +
	"\aOverlay\x12\x1f\n" +
	"\x04vpcs\x18\x01 \x03(\v2\v.config.VPCR\x04vpcs\x12.\n" +
	"\bpeerings\x18\x02 \x03(\v2\x12.config.VpcPeeringR\bpeerings\"\x9a\x01\n" +
	"\x14BgpAddressFamilyIPv4\x125\n" +
	"\x16redistribute_connected\x18\x01 \x01(\bR\x15redistributeConnected\x12/\n" +
	"\x13redistribute_static\x18\x02 \x01(\bR\x12redistributeStatic\x12\x1a\n" +
	"\bnetworks\x18\x03 \x03(\tR\bnetworks\"\x9a\x01\n" +
	"\x14BgpAddressFamilyIPv6\x125\n" +
	"\x16redistribute_connected\x18\x01 \x01(\bR\x15redistributeConnected\x12/\n" +
	"\x13redistribute_static\x18\x02 \x01(\bR\x12redistributeStatic\x12\x1a\n" +
	"\bnetworks\x18\x03 \x03(\tR\bnetworks\"G\n" +
	"\x19BgpAddressFamilyL2vpnEvpn\x12*\n" +
	"\x11advertise_all_vni\x18\x01 \x01(\bR\x0fadvertiseAllVni\"_\n" +
	"\x17BgpNeighborUpdateSource\x12\x1a\n" +
	"\aaddress\x18\x01 \x01(\tH\x00R\aaddress\x12\x1e\n" +
	"\tinterface\x18\x02 \x01(\tH\x00R\tinterfaceB\b\n" +
	"\x06source\"\xbc\x01\n" +
	"\vBgpNeighbor\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"remote_asn\x18\x02 \x01(\tR\tremoteAsn\x12.\n" +
	"\vaf_activate\x18\x03 \x03(\x0e2\r.config.BgpAFR\n" +
	"afActivate\x12D\n" +
	"\rupdate_source\x18\x04 \x01(\v2\x1f.config.BgpNeighborUpdateSourceR\fupdateSource\"\x80\x01\n" +
	"\bRouteMap\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12,\n" +
	"\x12match_prefix_lists\x18\x02 \x03(\tR\x10matchPrefixLists\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12\x1a\n" +
	"\bsequence\x18\x04 \x01(\rR\bsequence\"\xa5\x03\n" +
	"\fRouterConfig\x12\x10\n" +
	"\x03asn\x18\x01 \x01(\tR\x03asn\x12\x1b\n" +
	"\trouter_id\x18\x02 \x01(\tR\brouterId\x121\n" +
	"\tneighbors\x18\x03 \x03(\v2\x13.config.BgpNeighborR\tneighbors\x12D\n" +
	"\fipv4_unicast\x18\x04 \x01(\v2\x1c.config.BgpAddressFamilyIPv4H\x00R\vipv4Unicast\x88\x01\x01\x12D\n" +
	"\fipv6_unicast\x18\x05 \x01(\v2\x1c.config.BgpAddressFamilyIPv6H\x01R\vipv6Unicast\x88\x01\x01\x12E\n" +
	"\n" +
	"l2vpn_evpn\x18\x06 \x01(\v2!.config.BgpAddressFamilyL2vpnEvpnH\x02R\tl2vpnEvpn\x88\x01\x01\x12/\n" +
	"\n" +
	"route_maps\x18\a \x03(\v2\x10.config.RouteMapR\trouteMapsB\x0f\n" +
	"\r_ipv4_unicastB\x0f\n" +
	"\r_ipv6_unicastB\r\n" +
	"\v_l2vpn_evpn\"\xc0\x01\n" +
	"\x03VRF\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x121\n" +
	"\n" +
	"interfaces\x18\x02 \x03(\v2\x11.config.InterfaceR\n" +
	"interfaces\x121\n" +
	"\x06router\x18\x03 \x01(\v2\x14.config.RouterConfigH\x00R\x06router\x88\x01\x01\x12+\n" +
	"\x04ospf\x18\x04 \x01(\v2\x12.config.OspfConfigH\x01R\x04ospf\x88\x01\x01B\t\n" +
	"\a_routerB\a\n" +
	"\x05_ospf\"+\n" +
	"\bUnderlay\x12\x1f\n" +
	"\x04vrfs\x18\x01 \x03(\v2\v.config.VRFR\x04vrfs\"<\n" +
	"\x05Ports\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vsystem_name\x18\x02 \x01(\tR\n" +
	"systemName\"\x05\n" +
	"\x03Eal\"\xcb\x01\n" +
	"\rTracingConfig\x12*\n" +
	"\adefault\x18\x01 \x01(\x0e2\x10.config.LogLevelR\adefault\x12?\n" +
	"\btaglevel\x18\x02 \x03(\v2#.config.TracingConfig.TaglevelEntryR\btaglevel\x1aM\n" +
	"\rTaglevelEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\x0e2\x10.config.LogLevelR\x05value:\x028\x01\"\xc7\x01\n" +
	"\x06Device\x12,\n" +
	"\x06driver\x18\x01 \x01(\x0e2\x14.config.PacketDriverR\x06driver\x12\x1d\n" +
	"\x03eal\x18\x02 \x01(\v2\v.config.EalR\x03eal\x12#\n" +
	"\x05ports\x18\x03 \x03(\v2\r.config.PortsR\x05ports\x12\x1a\n" +
	"\bhostname\x18\x04 \x01(\tR\bhostname\x12/\n" +
	"\atracing\x18\x05 \x01(\v2\x15.config.TracingConfigR\atracing\"\xb0\x01\n" +
	"\rGatewayConfig\x12\x1e\n" +
	"\n" +
	"generation\x18\x01 \x01(\x03R\n" +
	"generation\x12&\n" +
	"\x06device\x18\x02 \x01(\v2\x0e.config.DeviceR\x06device\x12,\n" +
	"\bunderlay\x18\x03 \x01(\v2\x10.config.UnderlayR\bunderlay\x12)\n" +
	"\aoverlay\x18\x04 \x01(\v2\x0f.config.OverlayR\aoverlay*e\n" +
	"\x05Error\x12\x0e\n" +
	"\n" +
	"ERROR_NONE\x10\x00\x12\x1b\n" +
	"\x17ERROR_VALIDATION_FAILED\x10\x01\x12\x16\n" +
	"\x12ERROR_APPLY_FAILED\x10\x02\x12\x17\n" +
	"\x13ERROR_UNKNOWN_ERROR\x10\x03*`\n" +
	"\x0fOspfNetworkType\x12\r\n" +
	"\tBROADCAST\x10\x00\x12\x11\n" +
	"\rNON_BROADCAST\x10\x01\x12\x12\n" +
	"\x0ePOINT_TO_POINT\x10\x02\x12\x17\n" +
	"\x13POINT_TO_MULTIPOINT\x10\x03*\x91\x01\n" +
	"\x17InterfaceOperStatusType\x12\x1c\n" +
	"\x18INTERFACE_STATUS_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x18INTERFACE_STATUS_OPER_UP\x10\x01\x12\x1e\n" +
	"\x1aINTERFACE_STATUS_OPER_DOWN\x10\x02\x12\x1a\n" +
	"\x16INTERFACE_STATUS_ERROR\x10\x03*~\n" +
	"\x18InterfaceAdminStatusType\x12\"\n" +
	"\x1eINTERFACE_ADMIN_STATUS_UNKNOWN\x10\x00\x12\x1d\n" +
	"\x19INTERFACE_ADMIN_STATUS_UP\x10\x01\x12\x1f\n" +
	"\x1bINTERFACE_ADMIN_STATUS_DOWN\x10\x02*M\n" +
	"\x0fZebraStatusType\x12\x1e\n" +
	"\x1aZEBRA_STATUS_NOT_CONNECTED\x10\x00\x12\x1a\n" +
	"\x16ZEBRA_STATUS_CONNECTED\x10\x01*X\n" +
	"\x12FrrAgentStatusType\x12\"\n" +
	"\x1eFRR_AGENT_STATUS_NOT_CONNECTED\x10\x00\x12\x1e\n" +
	"\x1aFRR_AGENT_STATUS_CONNECTED\x10\x01*\x88\x01\n" +
	"\x13DataplaneStatusType\x12\x1c\n" +
	"\x18DATAPLANE_STATUS_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x18DATAPLANE_STATUS_HEALTHY\x10\x01\x12\x19\n" +
	"\x15DATAPLANE_STATUS_INIT\x10\x02\x12\x1a\n" +
	"\x16DATAPLANE_STATUS_ERROR\x10\x03*\x9e\x01\n" +
	"\x17BgpNeighborSessionState\x12\x13\n" +
	"\x0fBGP_STATE_UNSET\x10\x00\x12\x12\n" +
	"\x0eBGP_STATE_IDLE\x10\x01\x12\x15\n" +
	"\x11BGP_STATE_CONNECT\x10\x02\x12\x14\n" +
	"\x10BGP_STATE_ACTIVE\x10\x03\x12\x12\n" +
	"\x0eBGP_STATE_OPEN\x10\x04\x12\x19\n" +
	"\x15BGP_STATE_ESTABLISHED\x10\x05*X\n" +
	"\x06IfType\x12\x14\n" +
	"\x10IF_TYPE_ETHERNET\x10\x00\x12\x10\n" +
	"\fIF_TYPE_VLAN\x10\x01\x12\x14\n" +
	"\x10IF_TYPE_LOOPBACK\x10\x02\x12\x10\n" +
	"\fIF_TYPE_VTEP\x10\x03*2\n" +
	"\x06IfRole\x12\x12\n" +
	"\x0eIF_ROLE_FABRIC\x10\x00\x12\x14\n" +
	"\x10IF_ROLE_EXTERNAL\x10\x01*;\n" +
	"\x05BgpAF\x12\x10\n" +
	"\fIPV4_UNICAST\x10\x00\x12\x10\n" +
	"\fIPV6_UNICAST\x10\x01\x12\x0e\n" +
	"\n" +
	"L2VPN_EVPN\x10\x02*K\n" +
	"\bLogLevel\x12\a\n" +
	"\x03OFF\x10\x00\x12\t\n" +
	"\x05ERROR\x10\x01\x12\v\n" +
	"\aWARNING\x10\x02\x12\b\n" +
	"\x04INFO\x10\x03\x12\t\n" +
	"\x05DEBUG\x10\x04\x12\t\n" +
	"\x05TRACE\x10\x05*$\n" +
	"\fPacketDriver\x12\n" +
	"\n" +
	"\x06KERNEL\x10\x00\x12\b\n" +
	"\x04DPDK\x10\x012\xd5\x02\n" +
	"\rConfigService\x12<\n" +
	"\tGetConfig\x12\x18.config.GetConfigRequest\x1a\x15.config.GatewayConfig\x12^\n" +
	"\x13GetConfigGeneration\x12\".config.GetConfigGenerationRequest\x1a#.config.GetConfigGenerationResponse\x12I\n" +
	"\fUpdateConfig\x12\x1b.config.UpdateConfigRequest\x1a\x1c.config.UpdateConfigResponse\x12[\n" +
	"\x12GetDataplaneStatus\x12!.config.GetDataplaneStatusRequest\x1a\".config.GetDataplaneStatusResponseB\x0fZ\rpkg/dataplaneb\x06proto3"

var (
	file_proto_dataplane_proto_rawDescOnce sync.Once
	file_proto_dataplane_proto_rawDescData []byte
)

func file_proto_dataplane_proto_rawDescGZIP() []byte {
	file_proto_dataplane_proto_rawDescOnce.Do(func() {
		file_proto_dataplane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_dataplane_proto_rawDesc), len(file_proto_dataplane_proto_rawDesc)))
	})
	return file_proto_dataplane_proto_rawDescData
}

var file_proto_dataplane_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_proto_dataplane_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_proto_dataplane_proto_goTypes = []any{
	(Error)(0),                          // 0: config.Error
	(OspfNetworkType)(0),                // 1: config.OspfNetworkType
	(InterfaceOperStatusType)(0),        // 2: config.InterfaceOperStatusType
	(InterfaceAdminStatusType)(0),       // 3: config.InterfaceAdminStatusType
	(ZebraStatusType)(0),                // 4: config.ZebraStatusType
	(FrrAgentStatusType)(0),             // 5: config.FrrAgentStatusType
	(DataplaneStatusType)(0),            // 6: config.DataplaneStatusType
	(BgpNeighborSessionState)(0),        // 7: config.BgpNeighborSessionState
	(IfType)(0),                         // 8: config.IfType
	(IfRole)(0),                         // 9: config.IfRole
	(BgpAF)(0),                          // 10: config.BgpAF
	(LogLevel)(0),                       // 11: config.LogLevel
	(PacketDriver)(0),                   // 12: config.PacketDriver
	(*GetConfigRequest)(nil),            // 13: config.GetConfigRequest
	(*UpdateConfigRequest)(nil),         // 14: config.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),        // 15: config.UpdateConfigResponse
	(*GetConfigGenerationRequest)(nil),  // 16: config.GetConfigGenerationRequest
	(*GetConfigGenerationResponse)(nil), // 17: config.GetConfigGenerationResponse
	(*OspfInterface)(nil),               // 18: config.OspfInterface
	(*OspfConfig)(nil),                  // 19: config.OspfConfig
	(*GetDataplaneStatusRequest)(nil),   // 20: config.GetDataplaneStatusRequest
	(*InterfaceStatus)(nil),             // 21: config.InterfaceStatus
	(*FrrStatus)(nil),                   // 22: config.FrrStatus
	(*DataplaneStatusInfo)(nil),         // 23: config.DataplaneStatusInfo
	(*InterfaceCounters)(nil),           // 24: config.InterfaceCounters
	(*InterfaceRuntimeStatus)(nil),      // 25: config.InterfaceRuntimeStatus
	(*BgpMessageCounters)(nil),          // 26: config.BgpMessageCounters
	(*BgpMessages)(nil),                 // 27: config.BgpMessages
	(*BgpNeighborPrefixes)(nil),         // 28: config.BgpNeighborPrefixes
	(*BgpNeighborStatus)(nil),           // 29: config.BgpNeighborStatus
	(*BgpVrfStatus)(nil),                // 30: config.BgpVrfStatus
	(*BgpStatus)(nil),                   // 31: config.BgpStatus
	(*VpcInterfaceStatus)(nil),          // 32: config.VpcInterfaceStatus
	(*VpcStatus)(nil),                   // 33: config.VpcStatus
	(*VpcPeeringCounters)(nil),          // 34: config.VpcPeeringCounters
	(*GetDataplaneStatusResponse)(nil),  // 35: config.GetDataplaneStatusResponse
	(*Interface)(nil),                   // 36: config.Interface
	(*PeeringIPs)(nil),                  // 37: config.PeeringIPs
	(*PeeringAs)(nil),                   // 38: config.PeeringAs
	(*PeeringStatelessNAT)(nil),         // 39: config.PeeringStatelessNAT
	(*PeeringStatefulNAT)(nil),          // 40: config.PeeringStatefulNAT
	(*Expose)(nil),                      // 41: config.Expose
	(*PeeringEntryFor)(nil),             // 42: config.PeeringEntryFor
	(*VpcPeering)(nil),                  // 43: config.VpcPeering
	(*VPC)(nil),                         // 44: config.VPC
	(*Overlay)(nil),                     // 45: config.Overlay
	(*BgpAddressFamilyIPv4)(nil),        // 46: config.BgpAddressFamilyIPv4
	(*BgpAddressFamilyIPv6)(nil),        // 47: config.BgpAddressFamilyIPv6
	(*BgpAddressFamilyL2VpnEvpn)(nil),   // 48: config.BgpAddressFamilyL2vpnEvpn
	(*BgpNeighborUpdateSource)(nil),     // 49: config.BgpNeighborUpdateSource
	(*BgpNeighbor)(nil),                 // 50: config.BgpNeighbor
	(*RouteMap)(nil),                    // 51: config.RouteMap
	(*RouterConfig)(nil),                // 52: config.RouterConfig
	(*VRF)(nil),                         // 53: config.VRF
	(*Underlay)(nil),                    // 54: config.Underlay
	(*Ports)(nil),                       // 55: config.Ports
	(*Eal)(nil),                         // 56: config.Eal
	(*TracingConfig)(nil),               // 57: config.TracingConfig
	(*Device)(nil),                      // 58: config.Device
	(*GatewayConfig)(nil),               // 59: config.GatewayConfig
	nil,                                 // 60: config.BgpVrfStatus.NeighborsEntry
	nil,                                 // 61: config.BgpStatus.VrfsEntry
	nil,                                 // 62: config.VpcStatus.InterfacesEntry
	nil,                                 // 63: config.GetDataplaneStatusResponse.InterfaceRuntimeEntry
	nil,                                 // 64: config.GetDataplaneStatusResponse.VpcsEntry
	nil,                                 // 65: config.GetDataplaneStatusResponse.VpcPeeringCountersEntry
	nil,                                 // 66: config.TracingConfig.TaglevelEntry
	(*durationpb.Duration)(nil),         // 67: google.protobuf.Duration
}
var file_proto_dataplane_proto_depIdxs = []int32{
	59, // 0: config.UpdateConfigRequest.config:type_name -> config.GatewayConfig
	0,  // 1: config.UpdateConfigResponse.error:type_name -> config.Error
	1,  // 2: config.OspfInterface.network_type:type_name -> config.OspfNetworkType
	2,  // 3: config.InterfaceStatus.oper_status:type_name -> config.InterfaceOperStatusType
	3,  // 4: config.InterfaceStatus.admin_status:type_name -> config.InterfaceAdminStatusType
	4,  // 5: config.FrrStatus.zebra_status:type_name -> config.ZebraStatusType
	5,  // 6: config.FrrStatus.frr_agent_status:type_name -> config.FrrAgentStatusType
	6,  // 7: config.DataplaneStatusInfo.status:type_name -> config.DataplaneStatusType
	3,  // 8: config.InterfaceRuntimeStatus.admin_status:type_name -> config.InterfaceAdminStatusType
	2,  // 9: config.InterfaceRuntimeStatus.oper_status:type_name -> config.InterfaceOperStatusType
	24, // 10: config.InterfaceRuntimeStatus.counters:type_name -> config.InterfaceCounters
	26, // 11: config.BgpMessages.received:type_name -> config.BgpMessageCounters
	26, // 12: config.BgpMessages.sent:type_name -> config.BgpMessageCounters
	7,  // 13: config.BgpNeighborStatus.session_state:type_name -> config.BgpNeighborSessionState
	27, // 14: config.BgpNeighborStatus.messages:type_name -> config.BgpMessages
	28, // 15: config.BgpNeighborStatus.ipv4_unicast_prefixes:type_name -> config.BgpNeighborPrefixes
	28, // 16: config.BgpNeighborStatus.ipv6_unicast_prefixes:type_name -> config.BgpNeighborPrefixes
	28, // 17: config.BgpNeighborStatus.l2vpn_evpn_prefixes:type_name -> config.BgpNeighborPrefixes
	60, // 18: config.BgpVrfStatus.neighbors:type_name -> config.BgpVrfStatus.NeighborsEntry
	61, // 19: config.BgpStatus.vrfs:type_name -> config.BgpStatus.VrfsEntry
	3,  // 20: config.VpcInterfaceStatus.admin_status:type_name -> config.InterfaceAdminStatusType
	2,  // 21: config.VpcInterfaceStatus.oper_status:type_name -> config.InterfaceOperStatusType
	62, // 22: config.VpcStatus.interfaces:type_name -> config.VpcStatus.InterfacesEntry
	21, // 23: config.GetDataplaneStatusResponse.interface_statuses:type_name -> config.InterfaceStatus
	22, // 24: config.GetDataplaneStatusResponse.frr_status:type_name -> config.FrrStatus
	23, // 25: config.GetDataplaneStatusResponse.dataplane_status:type_name -> config.DataplaneStatusInfo
	63, // 26: config.GetDataplaneStatusResponse.interface_runtime:type_name -> config.GetDataplaneStatusResponse.InterfaceRuntimeEntry
	31, // 27: config.GetDataplaneStatusResponse.bgp:type_name -> config.BgpStatus
	64, // 28: config.GetDataplaneStatusResponse.vpcs:type_name -> config.GetDataplaneStatusResponse.VpcsEntry
	65, // 29: config.GetDataplaneStatusResponse.vpc_peering_counters:type_name -> config.GetDataplaneStatusResponse.VpcPeeringCountersEntry
	8,  // 30: config.Interface.type:type_name -> config.IfType
	9,  // 31: config.Interface.role:type_name -> config.IfRole
	18, // 32: config.Interface.ospf:type_name -> config.OspfInterface
	67, // 33: config.PeeringStatefulNAT.idleTimeout:type_name -> google.protobuf.Duration
	37, // 34: config.Expose.ips:type_name -> config.PeeringIPs
	38, // 35: config.Expose.as:type_name -> config.PeeringAs
	39, // 36: config.Expose.stateless:type_name -> config.PeeringStatelessNAT
	40, // 37: config.Expose.stateful:type_name -> config.PeeringStatefulNAT
	41, // 38: config.PeeringEntryFor.expose:type_name -> config.Expose
	42, // 39: config.VpcPeering.for:type_name -> config.PeeringEntryFor
	36, // 40: config.VPC.interfaces:type_name -> config.Interface
	44, // 41: config.Overlay.vpcs:type_name -> config.VPC
	43, // 42: config.Overlay.peerings:type_name -> config.VpcPeering
	10, // 43: config.BgpNeighbor.af_activate:type_name -> config.BgpAF
	49, // 44: config.BgpNeighbor.update_source:type_name -> config.BgpNeighborUpdateSource
	50, // 45: config.RouterConfig.neighbors:type_name -> config.BgpNeighbor
	46, // 46: config.RouterConfig.ipv4_unicast:type_name -> config.BgpAddressFamilyIPv4
	47, // 47: config.RouterConfig.ipv6_unicast:type_name -> config.BgpAddressFamilyIPv6
	48, // 48: config.RouterConfig.l2vpn_evpn:type_name -> config.BgpAddressFamilyL2vpnEvpn
	51, // 49: config.RouterConfig.route_maps:type_name -> config.RouteMap
	36, // 50: config.VRF.interfaces:type_name -> config.Interface
	52, // 51: config.VRF.router:type_name -> config.RouterConfig
	19, // 52: config.VRF.ospf:type_name -> config.OspfConfig
	53, // 53: config.Underlay.vrfs:type_name -> config.VRF
	11, // 54: config.TracingConfig.default:type_name -> config.LogLevel
	66, // 55: config.TracingConfig.taglevel:type_name -> config.TracingConfig.TaglevelEntry
	12, // 56: config.Device.driver:type_name -> config.PacketDriver
	56, // 57: config.Device.eal:type_name -> config.Eal
	55, // 58: config.Device.ports:type_name -> config.Ports
	57, // 59: config.Device.tracing:type_name -> config.TracingConfig
	58, // 60: config.GatewayConfig.device:type_name -> config.Device
	54, // 61: config.GatewayConfig.underlay:type_name -> config.Underlay
	45, // 62: config.GatewayConfig.overlay:type_name -> config.Overlay
	29, // 63: config.BgpVrfStatus.NeighborsEntry.value:type_name -> config.BgpNeighborStatus
	30, // 64: config.BgpStatus.VrfsEntry.value:type_name -> config.BgpVrfStatus
	32, // 65: config.VpcStatus.InterfacesEntry.value:type_name -> config.VpcInterfaceStatus
	25, // 66: config.GetDataplaneStatusResponse.InterfaceRuntimeEntry.value:type_name -> config.InterfaceRuntimeStatus
	33, // 67: config.GetDataplaneStatusResponse.VpcsEntry.value:type_name -> config.VpcStatus
	34, // 68: config.GetDataplaneStatusResponse.VpcPeeringCountersEntry.value:type_name -> config.VpcPeeringCounters
	11, // 69: config.TracingConfig.TaglevelEntry.value:type_name -> config.LogLevel
	13, // 70: config.ConfigService.GetConfig:input_type -> config.GetConfigRequest
	16, // 71: config.ConfigService.GetConfigGeneration:input_type -> config.GetConfigGenerationRequest
	14, // 72: config.ConfigService.UpdateConfig:input_type -> config.UpdateConfigRequest
	20, // 73: config.ConfigService.GetDataplaneStatus:input_type -> config.GetDataplaneStatusRequest
	59, // 74: config.ConfigService.GetConfig:output_type -> config.GatewayConfig
	17, // 75: config.ConfigService.GetConfigGeneration:output_type -> config.GetConfigGenerationResponse
	15, // 76: config.ConfigService.UpdateConfig:output_type -> config.UpdateConfigResponse
	35, // 77: config.ConfigService.GetDataplaneStatus:output_type -> config.GetDataplaneStatusResponse
	74, // [74:78] is the sub-list for method output_type
	70, // [70:74] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_proto_dataplane_proto_init() }
func file_proto_dataplane_proto_init() {
	if File_proto_dataplane_proto != nil {
		return
	}
	file_proto_dataplane_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_dataplane_proto_msgTypes[6].OneofWrappers = []any{}
	file_proto_dataplane_proto_msgTypes[23].OneofWrappers = []any{}
	file_proto_dataplane_proto_msgTypes[24].OneofWrappers = []any{
		(*PeeringIPs_Cidr)(nil),
		(*PeeringIPs_Not)(nil),
	}
	file_proto_dataplane_proto_msgTypes[25].OneofWrappers = []any{
		(*PeeringAs_Cidr)(nil),
		(*PeeringAs_Not)(nil),
	}
	file_proto_dataplane_proto_msgTypes[28].OneofWrappers = []any{
		(*Expose_Stateless)(nil),
		(*Expose_Stateful)(nil),
	}
	file_proto_dataplane_proto_msgTypes[36].OneofWrappers = []any{
		(*BgpNeighborUpdateSource_Address)(nil),
		(*BgpNeighborUpdateSource_Interface)(nil),
	}
	file_proto_dataplane_proto_msgTypes[39].OneofWrappers = []any{}
	file_proto_dataplane_proto_msgTypes[40].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_dataplane_proto_rawDesc), len(file_proto_dataplane_proto_rawDesc)),
			NumEnums:      13,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dataplane_proto_goTypes,
		DependencyIndexes: file_proto_dataplane_proto_depIdxs,
		EnumInfos:         file_proto_dataplane_proto_enumTypes,
		MessageInfos:      file_proto_dataplane_proto_msgTypes,
	}.Build()
	File_proto_dataplane_proto = out.File
	file_proto_dataplane_proto_goTypes = nil
	file_proto_dataplane_proto_depIdxs = nil
}
