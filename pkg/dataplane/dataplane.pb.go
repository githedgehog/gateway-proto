// Copyright 2025 Hedgehog
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto/dataplane.proto

package dataplane

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	Error_ERROR_NONE              Error = 0
	Error_ERROR_VALIDATION_FAILED Error = 1
	Error_ERROR_APPLY_FAILED      Error = 2
	Error_ERROR_UNKNOWN_ERROR     Error = 3
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0: "ERROR_NONE",
		1: "ERROR_VALIDATION_FAILED",
		2: "ERROR_APPLY_FAILED",
		3: "ERROR_UNKNOWN_ERROR",
	}
	Error_value = map[string]int32{
		"ERROR_NONE":              0,
		"ERROR_VALIDATION_FAILED": 1,
		"ERROR_APPLY_FAILED":      2,
		"ERROR_UNKNOWN_ERROR":     3,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{0}
}

// Defines interface representation on the Gateway
type IfType int32

const (
	IfType_IF_TYPE_ETHERNET IfType = 0
	IfType_IF_TYPE_VLAN     IfType = 1
	IfType_IF_TYPE_LOOPBACK IfType = 2
	IfType_IF_TYPE_VTEP     IfType = 3
)

// Enum value maps for IfType.
var (
	IfType_name = map[int32]string{
		0: "IF_TYPE_ETHERNET",
		1: "IF_TYPE_VLAN",
		2: "IF_TYPE_LOOPBACK",
		3: "IF_TYPE_VTEP",
	}
	IfType_value = map[string]int32{
		"IF_TYPE_ETHERNET": 0,
		"IF_TYPE_VLAN":     1,
		"IF_TYPE_LOOPBACK": 2,
		"IF_TYPE_VTEP":     3,
	}
)

func (x IfType) Enum() *IfType {
	p := new(IfType)
	*p = x
	return p
}

func (x IfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[1].Descriptor()
}

func (IfType) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[1]
}

func (x IfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfType.Descriptor instead.
func (IfType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{1}
}

// For physical interface - fabric-facing or external-facing
type IfRole int32

const (
	IfRole_IF_ROLE_FABRIC   IfRole = 0
	IfRole_IF_ROLE_EXTERNAL IfRole = 1
)

// Enum value maps for IfRole.
var (
	IfRole_name = map[int32]string{
		0: "IF_ROLE_FABRIC",
		1: "IF_ROLE_EXTERNAL",
	}
	IfRole_value = map[string]int32{
		"IF_ROLE_FABRIC":   0,
		"IF_ROLE_EXTERNAL": 1,
	}
)

func (x IfRole) Enum() *IfRole {
	p := new(IfRole)
	*p = x
	return p
}

func (x IfRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[2].Descriptor()
}

func (IfRole) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[2]
}

func (x IfRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfRole.Descriptor instead.
func (IfRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{2}
}

// AFIs supported for BGP peering
type BgpAF int32

const (
	BgpAF_IPV4_UNICAST BgpAF = 0
	BgpAF_IPV6_UNICAST BgpAF = 1
	BgpAF_L2VPN_EVPN   BgpAF = 2
)

// Enum value maps for BgpAF.
var (
	BgpAF_name = map[int32]string{
		0: "IPV4_UNICAST",
		1: "IPV6_UNICAST",
		2: "L2VPN_EVPN",
	}
	BgpAF_value = map[string]int32{
		"IPV4_UNICAST": 0,
		"IPV6_UNICAST": 1,
		"L2VPN_EVPN":   2,
	}
)

func (x BgpAF) Enum() *BgpAF {
	p := new(BgpAF)
	*p = x
	return p
}

func (x BgpAF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAF) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[3].Descriptor()
}

func (BgpAF) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[3]
}

func (x BgpAF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAF.Descriptor instead.
func (BgpAF) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{3}
}

// Log-level for dataplane and DPDK
type LogLevel int32

const (
	LogLevel_ERROR   LogLevel = 0
	LogLevel_WARNING LogLevel = 1
	LogLevel_INFO    LogLevel = 2
	LogLevel_DEBUG   LogLevel = 3
	LogLevel_TRACE   LogLevel = 4
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "ERROR",
		1: "WARNING",
		2: "INFO",
		3: "DEBUG",
		4: "TRACE",
	}
	LogLevel_value = map[string]int32{
		"ERROR":   0,
		"WARNING": 1,
		"INFO":    2,
		"DEBUG":   3,
		"TRACE":   4,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[4].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[4]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{4}
}

// Backend driver for packet processing
type PacketDriver int32

const (
	PacketDriver_KERNEL PacketDriver = 0
	PacketDriver_DPDK   PacketDriver = 1
)

// Enum value maps for PacketDriver.
var (
	PacketDriver_name = map[int32]string{
		0: "KERNEL",
		1: "DPDK",
	}
	PacketDriver_value = map[string]int32{
		"KERNEL": 0,
		"DPDK":   1,
	}
)

func (x PacketDriver) Enum() *PacketDriver {
	p := new(PacketDriver)
	*p = x
	return p
}

func (x PacketDriver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketDriver) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_proto_enumTypes[5].Descriptor()
}

func (PacketDriver) Type() protoreflect.EnumType {
	return &file_proto_dataplane_proto_enumTypes[5]
}

func (x PacketDriver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketDriver.Descriptor instead.
func (PacketDriver) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{5}
}

type GetConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{0}
}

type UpdateConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *GatewayConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateConfigRequest) GetConfig() *GatewayConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         Error                  `protobuf:"varint,1,opt,name=error,proto3,enum=config.Error" json:"error,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	mi := &file_proto_dataplane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateConfigResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_ERROR_NONE
}

func (x *UpdateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetConfigGenerationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigGenerationRequest) Reset() {
	*x = GetConfigGenerationRequest{}
	mi := &file_proto_dataplane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigGenerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigGenerationRequest) ProtoMessage() {}

func (x *GetConfigGenerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigGenerationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigGenerationRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{3}
}

type GetConfigGenerationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    uint64                 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigGenerationResponse) Reset() {
	*x = GetConfigGenerationResponse{}
	mi := &file_proto_dataplane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigGenerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigGenerationResponse) ProtoMessage() {}

func (x *GetConfigGenerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigGenerationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigGenerationResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{4}
}

func (x *GetConfigGenerationResponse) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

// Defines a logical interface. May correlate with physical representation
type Interface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipaddr        string                 `protobuf:"bytes,2,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	Type          IfType                 `protobuf:"varint,3,opt,name=type,proto3,enum=config.IfType" json:"type,omitempty"`
	Role          IfRole                 `protobuf:"varint,4,opt,name=role,proto3,enum=config.IfRole" json:"role,omitempty"`
	Vlan          *uint32                `protobuf:"varint,5,opt,name=vlan,proto3,oneof" json:"vlan,omitempty"`                              // only if VLAN role is defined
	Macaddr       *string                `protobuf:"bytes,6,opt,name=macaddr,proto3,oneof" json:"macaddr,omitempty"`                         // Base MAC address to be used to generate unified MAC for VTEP
	SystemName    *string                `protobuf:"bytes,7,opt,name=system_name,json=systemName,proto3,oneof" json:"system_name,omitempty"` // Parent interface for VLAN devices, only for VLAN role
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Interface) Reset() {
	*x = Interface{}
	mi := &file_proto_dataplane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{5}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetIpaddr() string {
	if x != nil {
		return x.Ipaddr
	}
	return ""
}

func (x *Interface) GetType() IfType {
	if x != nil {
		return x.Type
	}
	return IfType_IF_TYPE_ETHERNET
}

func (x *Interface) GetRole() IfRole {
	if x != nil {
		return x.Role
	}
	return IfRole_IF_ROLE_FABRIC
}

func (x *Interface) GetVlan() uint32 {
	if x != nil && x.Vlan != nil {
		return *x.Vlan
	}
	return 0
}

func (x *Interface) GetMacaddr() string {
	if x != nil && x.Macaddr != nil {
		return *x.Macaddr
	}
	return ""
}

func (x *Interface) GetSystemName() string {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return ""
}

// Defines the list of prefixes that VPCs can expose
type PeeringIPs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*PeeringIPs_Cidr
	//	*PeeringIPs_Not
	Rule          isPeeringIPs_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringIPs) Reset() {
	*x = PeeringIPs{}
	mi := &file_proto_dataplane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringIPs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringIPs) ProtoMessage() {}

func (x *PeeringIPs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringIPs.ProtoReflect.Descriptor instead.
func (*PeeringIPs) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{6}
}

func (x *PeeringIPs) GetRule() isPeeringIPs_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PeeringIPs) GetCidr() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringIPs_Cidr); ok {
			return x.Cidr
		}
	}
	return ""
}

func (x *PeeringIPs) GetNot() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringIPs_Not); ok {
			return x.Not
		}
	}
	return ""
}

type isPeeringIPs_Rule interface {
	isPeeringIPs_Rule()
}

type PeeringIPs_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type PeeringIPs_Not struct {
	Not string `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

func (*PeeringIPs_Cidr) isPeeringIPs_Rule() {}

func (*PeeringIPs_Not) isPeeringIPs_Rule() {}

// Defines the list of prefixes that exposing IPs will be translated to
type PeeringAs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*PeeringAs_Cidr
	//	*PeeringAs_Not
	Rule          isPeeringAs_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringAs) Reset() {
	*x = PeeringAs{}
	mi := &file_proto_dataplane_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringAs) ProtoMessage() {}

func (x *PeeringAs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringAs.ProtoReflect.Descriptor instead.
func (*PeeringAs) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{7}
}

func (x *PeeringAs) GetRule() isPeeringAs_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PeeringAs) GetCidr() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringAs_Cidr); ok {
			return x.Cidr
		}
	}
	return ""
}

func (x *PeeringAs) GetNot() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringAs_Not); ok {
			return x.Not
		}
	}
	return ""
}

type isPeeringAs_Rule interface {
	isPeeringAs_Rule()
}

type PeeringAs_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type PeeringAs_Not struct {
	Not string `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

func (*PeeringAs_Cidr) isPeeringAs_Rule() {}

func (*PeeringAs_Not) isPeeringAs_Rule() {}

// Defines a rule between exposing IP and translated
type Expose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ips           []*PeeringIPs          `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	As            []*PeeringAs           `protobuf:"bytes,2,rep,name=as,proto3" json:"as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expose) Reset() {
	*x = Expose{}
	mi := &file_proto_dataplane_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expose) ProtoMessage() {}

func (x *Expose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expose.ProtoReflect.Descriptor instead.
func (*Expose) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{8}
}

func (x *Expose) GetIps() []*PeeringIPs {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *Expose) GetAs() []*PeeringAs {
	if x != nil {
		return x.As
	}
	return nil
}

// Defines a list of exposures per VPC
type PeeringEntryFor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vpc           string                 `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	Expose        []*Expose              `protobuf:"bytes,2,rep,name=expose,proto3" json:"expose,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringEntryFor) Reset() {
	*x = PeeringEntryFor{}
	mi := &file_proto_dataplane_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringEntryFor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringEntryFor) ProtoMessage() {}

func (x *PeeringEntryFor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringEntryFor.ProtoReflect.Descriptor instead.
func (*PeeringEntryFor) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{9}
}

func (x *PeeringEntryFor) GetVpc() string {
	if x != nil {
		return x.Vpc
	}
	return ""
}

func (x *PeeringEntryFor) GetExpose() []*Expose {
	if x != nil {
		return x.Expose
	}
	return nil
}

// There can be only one peering per pair of given VPCs
type VpcPeering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // unique: e.g. VPC-1--VPC-2
	For           []*PeeringEntryFor     `protobuf:"bytes,2,rep,name=for,proto3" json:"for,omitempty"`   // it's guaranteed that only two entries are present
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpcPeering) Reset() {
	*x = VpcPeering{}
	mi := &file_proto_dataplane_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpcPeering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcPeering) ProtoMessage() {}

func (x *VpcPeering) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcPeering.ProtoReflect.Descriptor instead.
func (*VpcPeering) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{10}
}

func (x *VpcPeering) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpcPeering) GetFor() []*PeeringEntryFor {
	if x != nil {
		return x.For
	}
	return nil
}

type VPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // unique (key)
	Vni           uint32                 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	Interfaces    []*Interface           `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC) Reset() {
	*x = VPC{}
	mi := &file_proto_dataplane_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC) ProtoMessage() {}

func (x *VPC) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC.ProtoReflect.Descriptor instead.
func (*VPC) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{11}
}

func (x *VPC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VPC) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VPC) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Description of VPCs and Peerings between VPCs
type Overlay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vpcs          []*VPC                 `protobuf:"bytes,1,rep,name=vpcs,proto3" json:"vpcs,omitempty"`
	Peerings      []*VpcPeering          `protobuf:"bytes,2,rep,name=peerings,proto3" json:"peerings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Overlay) Reset() {
	*x = Overlay{}
	mi := &file_proto_dataplane_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overlay) ProtoMessage() {}

func (x *Overlay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overlay.ProtoReflect.Descriptor instead.
func (*Overlay) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{12}
}

func (x *Overlay) GetVpcs() []*VPC {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *Overlay) GetPeerings() []*VpcPeering {
	if x != nil {
		return x.Peerings
	}
	return nil
}

// BGP options for IPv4 UNICAST AFI
type BgpAddressFamilyIPv4 struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RedistributeConnected bool                   `protobuf:"varint,1,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool                   `protobuf:"varint,2,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BgpAddressFamilyIPv4) Reset() {
	*x = BgpAddressFamilyIPv4{}
	mi := &file_proto_dataplane_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyIPv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyIPv4) ProtoMessage() {}

func (x *BgpAddressFamilyIPv4) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyIPv4.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyIPv4) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{13}
}

func (x *BgpAddressFamilyIPv4) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpAddressFamilyIPv4) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

// BGP options for IPv6 UNICAST AFI
type BgpAddressFamilyIPv6 struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RedistributeConnected bool                   `protobuf:"varint,1,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool                   `protobuf:"varint,2,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BgpAddressFamilyIPv6) Reset() {
	*x = BgpAddressFamilyIPv6{}
	mi := &file_proto_dataplane_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyIPv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyIPv6) ProtoMessage() {}

func (x *BgpAddressFamilyIPv6) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyIPv6.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyIPv6) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{14}
}

func (x *BgpAddressFamilyIPv6) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpAddressFamilyIPv6) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

// BGP options for L2VPN EVPN AFI
type BgpAddressFamilyL2VpnEvpn struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AdvertiseAllVni bool                   `protobuf:"varint,1,opt,name=advertise_all_vni,json=advertiseAllVni,proto3" json:"advertise_all_vni,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BgpAddressFamilyL2VpnEvpn) Reset() {
	*x = BgpAddressFamilyL2VpnEvpn{}
	mi := &file_proto_dataplane_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyL2VpnEvpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyL2VpnEvpn) ProtoMessage() {}

func (x *BgpAddressFamilyL2VpnEvpn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyL2VpnEvpn.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyL2VpnEvpn) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{15}
}

func (x *BgpAddressFamilyL2VpnEvpn) GetAdvertiseAllVni() bool {
	if x != nil {
		return x.AdvertiseAllVni
	}
	return false
}

// BGP neighbor config
type BgpNeighbor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAsn     string                 `protobuf:"bytes,2,opt,name=remote_asn,json=remoteAsn,proto3" json:"remote_asn,omitempty"`
	AfActivate    []BgpAF                `protobuf:"varint,3,rep,packed,name=af_activate,json=afActivate,proto3,enum=config.BgpAF" json:"af_activate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_proto_dataplane_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{16}
}

func (x *BgpNeighbor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAsn() string {
	if x != nil {
		return x.RemoteAsn
	}
	return ""
}

func (x *BgpNeighbor) GetAfActivate() []BgpAF {
	if x != nil {
		return x.AfActivate
	}
	return nil
}

// IP Prefix filtering route map description
type RouteMap struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MatchPrefixLists []string               `protobuf:"bytes,2,rep,name=match_prefix_lists,json=matchPrefixLists,proto3" json:"match_prefix_lists,omitempty"`
	Action           string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Sequence         uint32                 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RouteMap) Reset() {
	*x = RouteMap{}
	mi := &file_proto_dataplane_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMap) ProtoMessage() {}

func (x *RouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMap.ProtoReflect.Descriptor instead.
func (*RouteMap) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{17}
}

func (x *RouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteMap) GetMatchPrefixLists() []string {
	if x != nil {
		return x.MatchPrefixLists
	}
	return nil
}

func (x *RouteMap) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// BGP Router config description for VRFs
type RouterConfig struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Asn           string                     `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty"`
	RouterId      string                     `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors     []*BgpNeighbor             `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Ipv4Unicast   *BgpAddressFamilyIPv4      `protobuf:"bytes,4,opt,name=ipv4_unicast,json=ipv4Unicast,proto3,oneof" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast   *BgpAddressFamilyIPv6      `protobuf:"bytes,5,opt,name=ipv6_unicast,json=ipv6Unicast,proto3,oneof" json:"ipv6_unicast,omitempty"`
	L2VpnEvpn     *BgpAddressFamilyL2VpnEvpn `protobuf:"bytes,6,opt,name=l2vpn_evpn,json=l2vpnEvpn,proto3,oneof" json:"l2vpn_evpn,omitempty"`
	RouteMaps     []*RouteMap                `protobuf:"bytes,7,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouterConfig) Reset() {
	*x = RouterConfig{}
	mi := &file_proto_dataplane_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfig) ProtoMessage() {}

func (x *RouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfig.ProtoReflect.Descriptor instead.
func (*RouterConfig) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{18}
}

func (x *RouterConfig) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *RouterConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *RouterConfig) GetIpv4Unicast() *BgpAddressFamilyIPv4 {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *RouterConfig) GetIpv6Unicast() *BgpAddressFamilyIPv6 {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *RouterConfig) GetL2VpnEvpn() *BgpAddressFamilyL2VpnEvpn {
	if x != nil {
		return x.L2VpnEvpn
	}
	return nil
}

func (x *RouterConfig) GetRouteMaps() []*RouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

// VRF description with list of connected interfaces and its BGP config
type VRF struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Interfaces    []*Interface           `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Router        *RouterConfig          `protobuf:"bytes,3,opt,name=router,proto3,oneof" json:"router,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VRF) Reset() {
	*x = VRF{}
	mi := &file_proto_dataplane_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VRF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRF) ProtoMessage() {}

func (x *VRF) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRF.ProtoReflect.Descriptor instead.
func (*VRF) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{19}
}

func (x *VRF) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VRF) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *VRF) GetRouter() *RouterConfig {
	if x != nil {
		return x.Router
	}
	return nil
}

// List of all non-VPC VRFs
type Underlay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vrf           []*VRF                 `protobuf:"bytes,1,rep,name=vrf,proto3" json:"vrf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Underlay) Reset() {
	*x = Underlay{}
	mi := &file_proto_dataplane_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Underlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Underlay) ProtoMessage() {}

func (x *Underlay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Underlay.ProtoReflect.Descriptor instead.
func (*Underlay) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{20}
}

func (x *Underlay) GetVrf() []*VRF {
	if x != nil {
		return x.Vrf
	}
	return nil
}

// Defines physical or system-level device
type Ports struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SystemName    string                 `protobuf:"bytes,2,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ports) Reset() {
	*x = Ports{}
	mi := &file_proto_dataplane_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ports) ProtoMessage() {}

func (x *Ports) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ports.ProtoReflect.Descriptor instead.
func (*Ports) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{21}
}

func (x *Ports) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ports) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

// RTE EAL config options for DPDK
type Eal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Eal) Reset() {
	*x = Eal{}
	mi := &file_proto_dataplane_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Eal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eal) ProtoMessage() {}

func (x *Eal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eal.ProtoReflect.Descriptor instead.
func (*Eal) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{22}
}

// System level config options
type Device struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        PacketDriver           `protobuf:"varint,1,opt,name=driver,proto3,enum=config.PacketDriver" json:"driver,omitempty"`
	Eal           *Eal                   `protobuf:"bytes,2,opt,name=eal,proto3" json:"eal,omitempty"`
	Ports         []*Ports               `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	Hostname      string                 `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Loglevel      LogLevel               `protobuf:"varint,5,opt,name=loglevel,proto3,enum=config.LogLevel" json:"loglevel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_proto_dataplane_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{23}
}

func (x *Device) GetDriver() PacketDriver {
	if x != nil {
		return x.Driver
	}
	return PacketDriver_KERNEL
}

func (x *Device) GetEal() *Eal {
	if x != nil {
		return x.Eal
	}
	return nil
}

func (x *Device) GetPorts() []*Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Device) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Device) GetLoglevel() LogLevel {
	if x != nil {
		return x.Loglevel
	}
	return LogLevel_ERROR
}

// Complete Gateway config options
type GatewayConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    uint64                 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	Device        *Device                `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Underlay      *Underlay              `protobuf:"bytes,3,opt,name=underlay,proto3" json:"underlay,omitempty"`
	Overlay       *Overlay               `protobuf:"bytes,4,opt,name=overlay,proto3" json:"overlay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayConfig) Reset() {
	*x = GatewayConfig{}
	mi := &file_proto_dataplane_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfig) ProtoMessage() {}

func (x *GatewayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfig.ProtoReflect.Descriptor instead.
func (*GatewayConfig) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_proto_rawDescGZIP(), []int{24}
}

func (x *GatewayConfig) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *GatewayConfig) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GatewayConfig) GetUnderlay() *Underlay {
	if x != nil {
		return x.Underlay
	}
	return nil
}

func (x *GatewayConfig) GetOverlay() *Overlay {
	if x != nil {
		return x.Overlay
	}
	return nil
}

var File_proto_dataplane_proto protoreflect.FileDescriptor

const file_proto_dataplane_proto_rawDesc = "" +
	"\n" +
	"\x15proto/dataplane.proto\x12\x06config\"\x12\n" +
	"\x10GetConfigRequest\"D\n" +
	"\x13UpdateConfigRequest\x12-\n" +
	"\x06config\x18\x01 \x01(\v2\x15.config.GatewayConfigR\x06config\"U\n" +
	"\x14UpdateConfigResponse\x12#\n" +
	"\x05error\x18\x01 \x01(\x0e2\r.config.ErrorR\x05error\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x1c\n" +
	"\x1aGetConfigGenerationRequest\"=\n" +
	"\x1bGetConfigGenerationResponse\x12\x1e\n" +
	"\n" +
	"generation\x18\x01 \x01(\x04R\n" +
	"generation\"\x82\x02\n" +
	"\tInterface\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06ipaddr\x18\x02 \x01(\tR\x06ipaddr\x12\"\n" +
	"\x04type\x18\x03 \x01(\x0e2\x0e.config.IfTypeR\x04type\x12\"\n" +
	"\x04role\x18\x04 \x01(\x0e2\x0e.config.IfRoleR\x04role\x12\x17\n" +
	"\x04vlan\x18\x05 \x01(\rH\x00R\x04vlan\x88\x01\x01\x12\x1d\n" +
	"\amacaddr\x18\x06 \x01(\tH\x01R\amacaddr\x88\x01\x01\x12$\n" +
	"\vsystem_name\x18\a \x01(\tH\x02R\n" +
	"systemName\x88\x01\x01B\a\n" +
	"\x05_vlanB\n" +
	"\n" +
	"\b_macaddrB\x0e\n" +
	"\f_system_name\">\n" +
	"\n" +
	"PeeringIPs\x12\x14\n" +
	"\x04cidr\x18\x01 \x01(\tH\x00R\x04cidr\x12\x12\n" +
	"\x03not\x18\x02 \x01(\tH\x00R\x03notB\x06\n" +
	"\x04rule\"=\n" +
	"\tPeeringAs\x12\x14\n" +
	"\x04cidr\x18\x01 \x01(\tH\x00R\x04cidr\x12\x12\n" +
	"\x03not\x18\x02 \x01(\tH\x00R\x03notB\x06\n" +
	"\x04rule\"Q\n" +
	"\x06Expose\x12$\n" +
	"\x03ips\x18\x01 \x03(\v2\x12.config.PeeringIPsR\x03ips\x12!\n" +
	"\x02as\x18\x02 \x03(\v2\x11.config.PeeringAsR\x02as\"K\n" +
	"\x0fPeeringEntryFor\x12\x10\n" +
	"\x03vpc\x18\x01 \x01(\tR\x03vpc\x12&\n" +
	"\x06expose\x18\x02 \x03(\v2\x0e.config.ExposeR\x06expose\"K\n" +
	"\n" +
	"VpcPeering\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12)\n" +
	"\x03for\x18\x02 \x03(\v2\x17.config.PeeringEntryForR\x03for\"^\n" +
	"\x03VPC\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03vni\x18\x02 \x01(\rR\x03vni\x121\n" +
	"\n" +
	"interfaces\x18\x03 \x03(\v2\x11.config.InterfaceR\n" +
	"interfaces\"Z\n" +
	"\aOverlay\x12\x1f\n" +
	"\x04vpcs\x18\x01 \x03(\v2\v.config.VPCR\x04vpcs\x12.\n" +
	"\bpeerings\x18\x02 \x03(\v2\x12.config.VpcPeeringR\bpeerings\"~\n" +
	"\x14BgpAddressFamilyIPv4\x125\n" +
	"\x16redistribute_connected\x18\x01 \x01(\bR\x15redistributeConnected\x12/\n" +
	"\x13redistribute_static\x18\x02 \x01(\bR\x12redistributeStatic\"~\n" +
	"\x14BgpAddressFamilyIPv6\x125\n" +
	"\x16redistribute_connected\x18\x01 \x01(\bR\x15redistributeConnected\x12/\n" +
	"\x13redistribute_static\x18\x02 \x01(\bR\x12redistributeStatic\"G\n" +
	"\x19BgpAddressFamilyL2vpnEvpn\x12*\n" +
	"\x11advertise_all_vni\x18\x01 \x01(\bR\x0fadvertiseAllVni\"v\n" +
	"\vBgpNeighbor\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x1d\n" +
	"\n" +
	"remote_asn\x18\x02 \x01(\tR\tremoteAsn\x12.\n" +
	"\vaf_activate\x18\x03 \x03(\x0e2\r.config.BgpAFR\n" +
	"afActivate\"\x80\x01\n" +
	"\bRouteMap\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12,\n" +
	"\x12match_prefix_lists\x18\x02 \x03(\tR\x10matchPrefixLists\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12\x1a\n" +
	"\bsequence\x18\x04 \x01(\rR\bsequence\"\xa5\x03\n" +
	"\fRouterConfig\x12\x10\n" +
	"\x03asn\x18\x01 \x01(\tR\x03asn\x12\x1b\n" +
	"\trouter_id\x18\x02 \x01(\tR\brouterId\x121\n" +
	"\tneighbors\x18\x03 \x03(\v2\x13.config.BgpNeighborR\tneighbors\x12D\n" +
	"\fipv4_unicast\x18\x04 \x01(\v2\x1c.config.BgpAddressFamilyIPv4H\x00R\vipv4Unicast\x88\x01\x01\x12D\n" +
	"\fipv6_unicast\x18\x05 \x01(\v2\x1c.config.BgpAddressFamilyIPv6H\x01R\vipv6Unicast\x88\x01\x01\x12E\n" +
	"\n" +
	"l2vpn_evpn\x18\x06 \x01(\v2!.config.BgpAddressFamilyL2vpnEvpnH\x02R\tl2vpnEvpn\x88\x01\x01\x12/\n" +
	"\n" +
	"route_maps\x18\a \x03(\v2\x10.config.RouteMapR\trouteMapsB\x0f\n" +
	"\r_ipv4_unicastB\x0f\n" +
	"\r_ipv6_unicastB\r\n" +
	"\v_l2vpn_evpn\"\x8a\x01\n" +
	"\x03VRF\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x121\n" +
	"\n" +
	"interfaces\x18\x02 \x03(\v2\x11.config.InterfaceR\n" +
	"interfaces\x121\n" +
	"\x06router\x18\x03 \x01(\v2\x14.config.RouterConfigH\x00R\x06router\x88\x01\x01B\t\n" +
	"\a_router\")\n" +
	"\bUnderlay\x12\x1d\n" +
	"\x03vrf\x18\x01 \x03(\v2\v.config.VRFR\x03vrf\"<\n" +
	"\x05Ports\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vsystem_name\x18\x02 \x01(\tR\n" +
	"systemName\"\x05\n" +
	"\x03Eal\"\xc4\x01\n" +
	"\x06Device\x12,\n" +
	"\x06driver\x18\x01 \x01(\x0e2\x14.config.PacketDriverR\x06driver\x12\x1d\n" +
	"\x03eal\x18\x02 \x01(\v2\v.config.EalR\x03eal\x12#\n" +
	"\x05ports\x18\x03 \x03(\v2\r.config.PortsR\x05ports\x12\x1a\n" +
	"\bhostname\x18\x04 \x01(\tR\bhostname\x12,\n" +
	"\bloglevel\x18\x05 \x01(\x0e2\x10.config.LogLevelR\bloglevel\"\xb0\x01\n" +
	"\rGatewayConfig\x12\x1e\n" +
	"\n" +
	"generation\x18\x01 \x01(\x04R\n" +
	"generation\x12&\n" +
	"\x06device\x18\x02 \x01(\v2\x0e.config.DeviceR\x06device\x12,\n" +
	"\bunderlay\x18\x03 \x01(\v2\x10.config.UnderlayR\bunderlay\x12)\n" +
	"\aoverlay\x18\x04 \x01(\v2\x0f.config.OverlayR\aoverlay*e\n" +
	"\x05Error\x12\x0e\n" +
	"\n" +
	"ERROR_NONE\x10\x00\x12\x1b\n" +
	"\x17ERROR_VALIDATION_FAILED\x10\x01\x12\x16\n" +
	"\x12ERROR_APPLY_FAILED\x10\x02\x12\x17\n" +
	"\x13ERROR_UNKNOWN_ERROR\x10\x03*X\n" +
	"\x06IfType\x12\x14\n" +
	"\x10IF_TYPE_ETHERNET\x10\x00\x12\x10\n" +
	"\fIF_TYPE_VLAN\x10\x01\x12\x14\n" +
	"\x10IF_TYPE_LOOPBACK\x10\x02\x12\x10\n" +
	"\fIF_TYPE_VTEP\x10\x03*2\n" +
	"\x06IfRole\x12\x12\n" +
	"\x0eIF_ROLE_FABRIC\x10\x00\x12\x14\n" +
	"\x10IF_ROLE_EXTERNAL\x10\x01*;\n" +
	"\x05BgpAF\x12\x10\n" +
	"\fIPV4_UNICAST\x10\x00\x12\x10\n" +
	"\fIPV6_UNICAST\x10\x01\x12\x0e\n" +
	"\n" +
	"L2VPN_EVPN\x10\x02*B\n" +
	"\bLogLevel\x12\t\n" +
	"\x05ERROR\x10\x00\x12\v\n" +
	"\aWARNING\x10\x01\x12\b\n" +
	"\x04INFO\x10\x02\x12\t\n" +
	"\x05DEBUG\x10\x03\x12\t\n" +
	"\x05TRACE\x10\x04*$\n" +
	"\fPacketDriver\x12\n" +
	"\n" +
	"\x06KERNEL\x10\x00\x12\b\n" +
	"\x04DPDK\x10\x012\xf8\x01\n" +
	"\rConfigService\x12<\n" +
	"\tGetConfig\x12\x18.config.GetConfigRequest\x1a\x15.config.GatewayConfig\x12^\n" +
	"\x13GetConfigGeneration\x12\".config.GetConfigGenerationRequest\x1a#.config.GetConfigGenerationResponse\x12I\n" +
	"\fUpdateConfig\x12\x1b.config.UpdateConfigRequest\x1a\x1c.config.UpdateConfigResponseB\x0fZ\rpkg/dataplaneb\x06proto3"

var (
	file_proto_dataplane_proto_rawDescOnce sync.Once
	file_proto_dataplane_proto_rawDescData []byte
)

func file_proto_dataplane_proto_rawDescGZIP() []byte {
	file_proto_dataplane_proto_rawDescOnce.Do(func() {
		file_proto_dataplane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_dataplane_proto_rawDesc), len(file_proto_dataplane_proto_rawDesc)))
	})
	return file_proto_dataplane_proto_rawDescData
}

var file_proto_dataplane_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_dataplane_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_dataplane_proto_goTypes = []any{
	(Error)(0),                          // 0: config.Error
	(IfType)(0),                         // 1: config.IfType
	(IfRole)(0),                         // 2: config.IfRole
	(BgpAF)(0),                          // 3: config.BgpAF
	(LogLevel)(0),                       // 4: config.LogLevel
	(PacketDriver)(0),                   // 5: config.PacketDriver
	(*GetConfigRequest)(nil),            // 6: config.GetConfigRequest
	(*UpdateConfigRequest)(nil),         // 7: config.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),        // 8: config.UpdateConfigResponse
	(*GetConfigGenerationRequest)(nil),  // 9: config.GetConfigGenerationRequest
	(*GetConfigGenerationResponse)(nil), // 10: config.GetConfigGenerationResponse
	(*Interface)(nil),                   // 11: config.Interface
	(*PeeringIPs)(nil),                  // 12: config.PeeringIPs
	(*PeeringAs)(nil),                   // 13: config.PeeringAs
	(*Expose)(nil),                      // 14: config.Expose
	(*PeeringEntryFor)(nil),             // 15: config.PeeringEntryFor
	(*VpcPeering)(nil),                  // 16: config.VpcPeering
	(*VPC)(nil),                         // 17: config.VPC
	(*Overlay)(nil),                     // 18: config.Overlay
	(*BgpAddressFamilyIPv4)(nil),        // 19: config.BgpAddressFamilyIPv4
	(*BgpAddressFamilyIPv6)(nil),        // 20: config.BgpAddressFamilyIPv6
	(*BgpAddressFamilyL2VpnEvpn)(nil),   // 21: config.BgpAddressFamilyL2vpnEvpn
	(*BgpNeighbor)(nil),                 // 22: config.BgpNeighbor
	(*RouteMap)(nil),                    // 23: config.RouteMap
	(*RouterConfig)(nil),                // 24: config.RouterConfig
	(*VRF)(nil),                         // 25: config.VRF
	(*Underlay)(nil),                    // 26: config.Underlay
	(*Ports)(nil),                       // 27: config.Ports
	(*Eal)(nil),                         // 28: config.Eal
	(*Device)(nil),                      // 29: config.Device
	(*GatewayConfig)(nil),               // 30: config.GatewayConfig
}
var file_proto_dataplane_proto_depIdxs = []int32{
	30, // 0: config.UpdateConfigRequest.config:type_name -> config.GatewayConfig
	0,  // 1: config.UpdateConfigResponse.error:type_name -> config.Error
	1,  // 2: config.Interface.type:type_name -> config.IfType
	2,  // 3: config.Interface.role:type_name -> config.IfRole
	12, // 4: config.Expose.ips:type_name -> config.PeeringIPs
	13, // 5: config.Expose.as:type_name -> config.PeeringAs
	14, // 6: config.PeeringEntryFor.expose:type_name -> config.Expose
	15, // 7: config.VpcPeering.for:type_name -> config.PeeringEntryFor
	11, // 8: config.VPC.interfaces:type_name -> config.Interface
	17, // 9: config.Overlay.vpcs:type_name -> config.VPC
	16, // 10: config.Overlay.peerings:type_name -> config.VpcPeering
	3,  // 11: config.BgpNeighbor.af_activate:type_name -> config.BgpAF
	22, // 12: config.RouterConfig.neighbors:type_name -> config.BgpNeighbor
	19, // 13: config.RouterConfig.ipv4_unicast:type_name -> config.BgpAddressFamilyIPv4
	20, // 14: config.RouterConfig.ipv6_unicast:type_name -> config.BgpAddressFamilyIPv6
	21, // 15: config.RouterConfig.l2vpn_evpn:type_name -> config.BgpAddressFamilyL2vpnEvpn
	23, // 16: config.RouterConfig.route_maps:type_name -> config.RouteMap
	11, // 17: config.VRF.interfaces:type_name -> config.Interface
	24, // 18: config.VRF.router:type_name -> config.RouterConfig
	25, // 19: config.Underlay.vrf:type_name -> config.VRF
	5,  // 20: config.Device.driver:type_name -> config.PacketDriver
	28, // 21: config.Device.eal:type_name -> config.Eal
	27, // 22: config.Device.ports:type_name -> config.Ports
	4,  // 23: config.Device.loglevel:type_name -> config.LogLevel
	29, // 24: config.GatewayConfig.device:type_name -> config.Device
	26, // 25: config.GatewayConfig.underlay:type_name -> config.Underlay
	18, // 26: config.GatewayConfig.overlay:type_name -> config.Overlay
	6,  // 27: config.ConfigService.GetConfig:input_type -> config.GetConfigRequest
	9,  // 28: config.ConfigService.GetConfigGeneration:input_type -> config.GetConfigGenerationRequest
	7,  // 29: config.ConfigService.UpdateConfig:input_type -> config.UpdateConfigRequest
	30, // 30: config.ConfigService.GetConfig:output_type -> config.GatewayConfig
	10, // 31: config.ConfigService.GetConfigGeneration:output_type -> config.GetConfigGenerationResponse
	8,  // 32: config.ConfigService.UpdateConfig:output_type -> config.UpdateConfigResponse
	30, // [30:33] is the sub-list for method output_type
	27, // [27:30] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_proto_dataplane_proto_init() }
func file_proto_dataplane_proto_init() {
	if File_proto_dataplane_proto != nil {
		return
	}
	file_proto_dataplane_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_dataplane_proto_msgTypes[6].OneofWrappers = []any{
		(*PeeringIPs_Cidr)(nil),
		(*PeeringIPs_Not)(nil),
	}
	file_proto_dataplane_proto_msgTypes[7].OneofWrappers = []any{
		(*PeeringAs_Cidr)(nil),
		(*PeeringAs_Not)(nil),
	}
	file_proto_dataplane_proto_msgTypes[18].OneofWrappers = []any{}
	file_proto_dataplane_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_dataplane_proto_rawDesc), len(file_proto_dataplane_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dataplane_proto_goTypes,
		DependencyIndexes: file_proto_dataplane_proto_depIdxs,
		EnumInfos:         file_proto_dataplane_proto_enumTypes,
		MessageInfos:      file_proto_dataplane_proto_msgTypes,
	}.Build()
	File_proto_dataplane_proto = out.File
	file_proto_dataplane_proto_goTypes = nil
	file_proto_dataplane_proto_depIdxs = nil
}
