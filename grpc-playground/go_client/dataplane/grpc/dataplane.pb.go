// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: dataplane.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	Error_ERROR_NONE              Error = 0
	Error_ERROR_VALIDATION_FAILED Error = 1
	Error_ERROR_APPLY_FAILED      Error = 2
	Error_ERROR_UNKNOWN_ERROR     Error = 3
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0: "ERROR_NONE",
		1: "ERROR_VALIDATION_FAILED",
		2: "ERROR_APPLY_FAILED",
		3: "ERROR_UNKNOWN_ERROR",
	}
	Error_value = map[string]int32{
		"ERROR_NONE":              0,
		"ERROR_VALIDATION_FAILED": 1,
		"ERROR_APPLY_FAILED":      2,
		"ERROR_UNKNOWN_ERROR":     3,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_dataplane_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{0}
}

type IfType int32

const (
	IfType_IF_TYPE_UPLINK     IfType = 0
	IfType_IF_TYPE_MANAGEMENT IfType = 1
	IfType_IF_TYPE_VXLAN      IfType = 2
)

// Enum value maps for IfType.
var (
	IfType_name = map[int32]string{
		0: "IF_TYPE_UPLINK",
		1: "IF_TYPE_MANAGEMENT",
		2: "IF_TYPE_VXLAN",
	}
	IfType_value = map[string]int32{
		"IF_TYPE_UPLINK":     0,
		"IF_TYPE_MANAGEMENT": 1,
		"IF_TYPE_VXLAN":      2,
	}
)

func (x IfType) Enum() *IfType {
	p := new(IfType)
	*p = x
	return p
}

func (x IfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_enumTypes[1].Descriptor()
}

func (IfType) Type() protoreflect.EnumType {
	return &file_dataplane_proto_enumTypes[1]
}

func (x IfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfType.Descriptor instead.
func (IfType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{1}
}

type GetConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	mi := &file_dataplane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{0}
}

type UpdateConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *GatewayConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	mi := &file_dataplane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateConfigRequest) GetConfig() *GatewayConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         Error                  `protobuf:"varint,1,opt,name=error,proto3,enum=config.Error" json:"error,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigResponse) Reset() {
	*x = UpdateConfigResponse{}
	mi := &file_dataplane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResponse) ProtoMessage() {}

func (x *UpdateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateConfigResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_ERROR_NONE
}

func (x *UpdateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetConfigGenerationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigGenerationRequest) Reset() {
	*x = GetConfigGenerationRequest{}
	mi := &file_dataplane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigGenerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigGenerationRequest) ProtoMessage() {}

func (x *GetConfigGenerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigGenerationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigGenerationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{3}
}

type GetConfigGenerationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    uint64                 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigGenerationResponse) Reset() {
	*x = GetConfigGenerationResponse{}
	mi := &file_dataplane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigGenerationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigGenerationResponse) ProtoMessage() {}

func (x *GetConfigGenerationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigGenerationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigGenerationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{4}
}

func (x *GetConfigGenerationResponse) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type Subnet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cidr          string                 `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	mi := &file_dataplane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{5}
}

func (x *Subnet) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *Subnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Vni           uint32                 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Subnets       []*Subnet              `protobuf:"bytes,4,rep,name=subnets,proto3" json:"subnets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC) Reset() {
	*x = VPC{}
	mi := &file_dataplane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC) ProtoMessage() {}

func (x *VPC) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC.ProtoReflect.Descriptor instead.
func (*VPC) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{6}
}

func (x *VPC) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VPC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VPC) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VPC) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Ipaddr        string                 `protobuf:"bytes,2,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Pciaddr       string                 `protobuf:"bytes,4,opt,name=pciaddr,proto3" json:"pciaddr,omitempty"`
	Type          IfType                 `protobuf:"varint,5,opt,name=type,proto3,enum=config.IfType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_dataplane_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{7}
}

func (x *Device) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Device) GetIpaddr() string {
	if x != nil {
		return x.Ipaddr
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetPciaddr() string {
	if x != nil {
		return x.Pciaddr
	}
	return ""
}

func (x *Device) GetType() IfType {
	if x != nil {
		return x.Type
	}
	return IfType_IF_TYPE_UPLINK
}

type PeeringIPs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*PeeringIPs_Cidr
	//	*PeeringIPs_Not
	Rule          isPeeringIPs_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringIPs) Reset() {
	*x = PeeringIPs{}
	mi := &file_dataplane_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringIPs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringIPs) ProtoMessage() {}

func (x *PeeringIPs) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringIPs.ProtoReflect.Descriptor instead.
func (*PeeringIPs) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{8}
}

func (x *PeeringIPs) GetRule() isPeeringIPs_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PeeringIPs) GetCidr() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringIPs_Cidr); ok {
			return x.Cidr
		}
	}
	return ""
}

func (x *PeeringIPs) GetNot() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringIPs_Not); ok {
			return x.Not
		}
	}
	return ""
}

type isPeeringIPs_Rule interface {
	isPeeringIPs_Rule()
}

type PeeringIPs_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type PeeringIPs_Not struct {
	Not string `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

func (*PeeringIPs_Cidr) isPeeringIPs_Rule() {}

func (*PeeringIPs_Not) isPeeringIPs_Rule() {}

type PeeringAs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*PeeringAs_Cidr
	//	*PeeringAs_Not
	Rule          isPeeringAs_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringAs) Reset() {
	*x = PeeringAs{}
	mi := &file_dataplane_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringAs) ProtoMessage() {}

func (x *PeeringAs) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringAs.ProtoReflect.Descriptor instead.
func (*PeeringAs) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{9}
}

func (x *PeeringAs) GetRule() isPeeringAs_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PeeringAs) GetCidr() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringAs_Cidr); ok {
			return x.Cidr
		}
	}
	return ""
}

func (x *PeeringAs) GetNot() string {
	if x != nil {
		if x, ok := x.Rule.(*PeeringAs_Not); ok {
			return x.Not
		}
	}
	return ""
}

type isPeeringAs_Rule interface {
	isPeeringAs_Rule()
}

type PeeringAs_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type PeeringAs_Not struct {
	Not string `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

func (*PeeringAs_Cidr) isPeeringAs_Rule() {}

func (*PeeringAs_Not) isPeeringAs_Rule() {}

type PeeringEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	As            []*PeeringAs           `protobuf:"bytes,1,rep,name=as,proto3" json:"as,omitempty"`
	Ips           []*PeeringIPs          `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeeringEntry) Reset() {
	*x = PeeringEntry{}
	mi := &file_dataplane_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeeringEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringEntry) ProtoMessage() {}

func (x *PeeringEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringEntry.ProtoReflect.Descriptor instead.
func (*PeeringEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{10}
}

func (x *PeeringEntry) GetAs() []*PeeringAs {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *PeeringEntry) GetIps() []*PeeringIPs {
	if x != nil {
		return x.Ips
	}
	return nil
}

type Peering struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Name          string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Entries       map[string]*PeeringEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peering) Reset() {
	*x = Peering{}
	mi := &file_dataplane_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peering) ProtoMessage() {}

func (x *Peering) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peering.ProtoReflect.Descriptor instead.
func (*Peering) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{11}
}

func (x *Peering) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Peering) GetEntries() map[string]*PeeringEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type BgpAddressFamilyOptions struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	RedistributeConnected bool                   `protobuf:"varint,1,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool                   `protobuf:"varint,2,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	SendCommunity         bool                   `protobuf:"varint,3,opt,name=send_community,json=sendCommunity,proto3" json:"send_community,omitempty"`
	AdvertiseAllVni       bool                   `protobuf:"varint,4,opt,name=advertise_all_vni,json=advertiseAllVni,proto3" json:"advertise_all_vni,omitempty"`
	Ipv4Enable            bool                   `protobuf:"varint,5,opt,name=ipv4_enable,json=ipv4Enable,proto3" json:"ipv4_enable,omitempty"`
	L2VpnEnable           bool                   `protobuf:"varint,6,opt,name=l2vpn_enable,json=l2vpnEnable,proto3" json:"l2vpn_enable,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BgpAddressFamilyOptions) Reset() {
	*x = BgpAddressFamilyOptions{}
	mi := &file_dataplane_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyOptions) ProtoMessage() {}

func (x *BgpAddressFamilyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyOptions.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyOptions) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{12}
}

func (x *BgpAddressFamilyOptions) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpAddressFamilyOptions) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpAddressFamilyOptions) GetSendCommunity() bool {
	if x != nil {
		return x.SendCommunity
	}
	return false
}

func (x *BgpAddressFamilyOptions) GetAdvertiseAllVni() bool {
	if x != nil {
		return x.AdvertiseAllVni
	}
	return false
}

func (x *BgpAddressFamilyOptions) GetIpv4Enable() bool {
	if x != nil {
		return x.Ipv4Enable
	}
	return false
}

func (x *BgpAddressFamilyOptions) GetL2VpnEnable() bool {
	if x != nil {
		return x.L2VpnEnable
	}
	return false
}

type BgpNeighbor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Address         string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAsn       string                 `protobuf:"bytes,2,opt,name=remote_asn,json=remoteAsn,proto3" json:"remote_asn,omitempty"`
	AddressFamilies []string               `protobuf:"bytes,3,rep,name=address_families,json=addressFamilies,proto3" json:"address_families,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_dataplane_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{13}
}

func (x *BgpNeighbor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAsn() string {
	if x != nil {
		return x.RemoteAsn
	}
	return ""
}

func (x *BgpNeighbor) GetAddressFamilies() []string {
	if x != nil {
		return x.AddressFamilies
	}
	return nil
}

type RouteMap struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MatchPrefixLists []string               `protobuf:"bytes,2,rep,name=match_prefix_lists,json=matchPrefixLists,proto3" json:"match_prefix_lists,omitempty"`
	Action           string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Sequence         uint32                 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RouteMap) Reset() {
	*x = RouteMap{}
	mi := &file_dataplane_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMap) ProtoMessage() {}

func (x *RouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMap.ProtoReflect.Descriptor instead.
func (*RouteMap) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{14}
}

func (x *RouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteMap) GetMatchPrefixLists() []string {
	if x != nil {
		return x.MatchPrefixLists
	}
	return nil
}

func (x *RouteMap) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type RouterConfig struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Asn           string                     `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty"`
	RouterId      string                     `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors     []*BgpNeighbor             `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Options       []*BgpAddressFamilyOptions `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	RouteMaps     []*RouteMap                `protobuf:"bytes,5,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouterConfig) Reset() {
	*x = RouterConfig{}
	mi := &file_dataplane_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfig) ProtoMessage() {}

func (x *RouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfig.ProtoReflect.Descriptor instead.
func (*RouterConfig) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{15}
}

func (x *RouterConfig) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *RouterConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *RouterConfig) GetOptions() []*BgpAddressFamilyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RouterConfig) GetRouteMaps() []*RouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

type VRF struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Router        *RouterConfig          `protobuf:"bytes,2,opt,name=router,proto3" json:"router,omitempty"`
	Vpc           *VPC                   `protobuf:"bytes,3,opt,name=vpc,proto3" json:"vpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VRF) Reset() {
	*x = VRF{}
	mi := &file_dataplane_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VRF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRF) ProtoMessage() {}

func (x *VRF) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRF.ProtoReflect.Descriptor instead.
func (*VRF) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{16}
}

func (x *VRF) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VRF) GetRouter() *RouterConfig {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *VRF) GetVpc() *VPC {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type GatewayConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Generation    uint64                 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	Devices       []*Device              `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	Peerings      []*Peering             `protobuf:"bytes,3,rep,name=peerings,proto3" json:"peerings,omitempty"`
	Vrfs          []*VRF                 `protobuf:"bytes,4,rep,name=vrfs,proto3" json:"vrfs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayConfig) Reset() {
	*x = GatewayConfig{}
	mi := &file_dataplane_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfig) ProtoMessage() {}

func (x *GatewayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfig.ProtoReflect.Descriptor instead.
func (*GatewayConfig) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_rawDescGZIP(), []int{17}
}

func (x *GatewayConfig) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *GatewayConfig) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *GatewayConfig) GetPeerings() []*Peering {
	if x != nil {
		return x.Peerings
	}
	return nil
}

func (x *GatewayConfig) GetVrfs() []*VRF {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

var File_dataplane_proto protoreflect.FileDescriptor

var file_dataplane_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x55, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x03, 0x56, 0x50, 0x43,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x22, 0x88, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x63, 0x69, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x63, 0x69, 0x61, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0a, 0x50,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12,
	0x12, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x6e, 0x6f, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x50,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x12,
	0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6e,
	0x6f, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x0c, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x02, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x52, 0x02, 0x61, 0x73, 0x12, 0x24, 0x0a,
	0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x50, 0x73, 0x52, 0x03,
	0x69, 0x70, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x02,
	0x0a, 0x17, 0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x56, 0x6e, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x71, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x08,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdc,
	0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x66, 0x0a,
	0x03, 0x56, 0x52, 0x46, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x50, 0x43,
	0x52, 0x03, 0x76, 0x70, 0x63, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x04, 0x76, 0x72, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x52, 0x46, 0x52, 0x04, 0x76, 0x72, 0x66, 0x73, 0x2a,
	0x65, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x47, 0x0a, 0x06, 0x49, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x32,
	0xf8, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_rawDescOnce sync.Once
	file_dataplane_proto_rawDescData = file_dataplane_proto_rawDesc
)

func file_dataplane_proto_rawDescGZIP() []byte {
	file_dataplane_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_rawDescData)
	})
	return file_dataplane_proto_rawDescData
}

var file_dataplane_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_dataplane_proto_goTypes = []any{
	(Error)(0),                          // 0: config.Error
	(IfType)(0),                         // 1: config.IfType
	(*GetConfigRequest)(nil),            // 2: config.GetConfigRequest
	(*UpdateConfigRequest)(nil),         // 3: config.UpdateConfigRequest
	(*UpdateConfigResponse)(nil),        // 4: config.UpdateConfigResponse
	(*GetConfigGenerationRequest)(nil),  // 5: config.GetConfigGenerationRequest
	(*GetConfigGenerationResponse)(nil), // 6: config.GetConfigGenerationResponse
	(*Subnet)(nil),                      // 7: config.Subnet
	(*VPC)(nil),                         // 8: config.VPC
	(*Device)(nil),                      // 9: config.Device
	(*PeeringIPs)(nil),                  // 10: config.PeeringIPs
	(*PeeringAs)(nil),                   // 11: config.PeeringAs
	(*PeeringEntry)(nil),                // 12: config.PeeringEntry
	(*Peering)(nil),                     // 13: config.Peering
	(*BgpAddressFamilyOptions)(nil),     // 14: config.BgpAddressFamilyOptions
	(*BgpNeighbor)(nil),                 // 15: config.BgpNeighbor
	(*RouteMap)(nil),                    // 16: config.RouteMap
	(*RouterConfig)(nil),                // 17: config.RouterConfig
	(*VRF)(nil),                         // 18: config.VRF
	(*GatewayConfig)(nil),               // 19: config.GatewayConfig
	nil,                                 // 20: config.Peering.EntriesEntry
}
var file_dataplane_proto_depIdxs = []int32{
	19, // 0: config.UpdateConfigRequest.config:type_name -> config.GatewayConfig
	0,  // 1: config.UpdateConfigResponse.error:type_name -> config.Error
	7,  // 2: config.VPC.subnets:type_name -> config.Subnet
	1,  // 3: config.Device.type:type_name -> config.IfType
	11, // 4: config.PeeringEntry.as:type_name -> config.PeeringAs
	10, // 5: config.PeeringEntry.ips:type_name -> config.PeeringIPs
	20, // 6: config.Peering.entries:type_name -> config.Peering.EntriesEntry
	15, // 7: config.RouterConfig.neighbors:type_name -> config.BgpNeighbor
	14, // 8: config.RouterConfig.options:type_name -> config.BgpAddressFamilyOptions
	16, // 9: config.RouterConfig.route_maps:type_name -> config.RouteMap
	17, // 10: config.VRF.router:type_name -> config.RouterConfig
	8,  // 11: config.VRF.vpc:type_name -> config.VPC
	9,  // 12: config.GatewayConfig.devices:type_name -> config.Device
	13, // 13: config.GatewayConfig.peerings:type_name -> config.Peering
	18, // 14: config.GatewayConfig.vrfs:type_name -> config.VRF
	12, // 15: config.Peering.EntriesEntry.value:type_name -> config.PeeringEntry
	2,  // 16: config.ConfigService.GetConfig:input_type -> config.GetConfigRequest
	5,  // 17: config.ConfigService.GetConfigGeneration:input_type -> config.GetConfigGenerationRequest
	3,  // 18: config.ConfigService.UpdateConfig:input_type -> config.UpdateConfigRequest
	19, // 19: config.ConfigService.GetConfig:output_type -> config.GatewayConfig
	6,  // 20: config.ConfigService.GetConfigGeneration:output_type -> config.GetConfigGenerationResponse
	4,  // 21: config.ConfigService.UpdateConfig:output_type -> config.UpdateConfigResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dataplane_proto_init() }
func file_dataplane_proto_init() {
	if File_dataplane_proto != nil {
		return
	}
	file_dataplane_proto_msgTypes[8].OneofWrappers = []any{
		(*PeeringIPs_Cidr)(nil),
		(*PeeringIPs_Not)(nil),
	}
	file_dataplane_proto_msgTypes[9].OneofWrappers = []any{
		(*PeeringAs_Cidr)(nil),
		(*PeeringAs_Not)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_msgTypes,
	}.Build()
	File_dataplane_proto = out.File
	file_dataplane_proto_rawDesc = nil
	file_dataplane_proto_goTypes = nil
	file_dataplane_proto_depIdxs = nil
}
