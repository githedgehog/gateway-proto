syntax = "proto3";

package config;

option go_package = "dataplane/grpc";

service ConfigService {
  rpc GetConfig (GetConfigRequest) returns (GatewayConfig);
  rpc GetConfigGeneration (GetConfigGenerationRequest) returns (GetConfigGenerationResponse);
  rpc UpdateConfig (UpdateConfigRequest) returns (UpdateConfigResponse);
}

message GetConfigRequest {
}

message UpdateConfigRequest {
  GatewayConfig config = 1;
}

message UpdateConfigResponse {
  Error error = 1;
  string message = 2;
}

enum Error {
  ERROR_NONE = 0;
  ERROR_VALIDATION_FAILED = 1;
  ERROR_APPLY_FAILED = 2;
  ERROR_UNKNOWN_ERROR = 3;
}

enum IfType {
  IF_TYPE_UPLINK = 0;
  IF_TYPE_MANAGEMENT = 1;
  IF_TYPE_VXLAN = 2;
}

message GetConfigGenerationRequest {
}

message GetConfigGenerationResponse {
  uint64 generation = 1;
}

message Subnet {
  string cidr = 1;
  string name = 2;
}

message VPC {
  string id = 1;
  string name = 2;
  uint32 vni = 3;
  repeated Subnet subnets = 4;
}

message Device {
  uint32 index = 1;
  string ipaddr = 2;
  string name = 3;
  string pciaddr = 4;
  IfType type = 5;
}

message PeeringIPs {
  oneof rule {
    string cidr = 1;
    string not = 2;
  }
}

message PeeringAs {
  oneof rule {
    string cidr = 1;
    string not = 2;
  }
}

message PeeringEntry {
  repeated PeeringAs as = 1;
  repeated PeeringIPs ips = 2;
}

message Peering {
  string name = 1;
  map<string, PeeringEntry> entries = 2;
}

message BgpAddressFamilyOptions {
  bool redistribute_connected = 1;
  bool redistribute_static = 2;
  bool send_community = 3;
  bool advertise_all_vni = 4;
  bool ipv4_enable = 5;
  bool l2vpn_enable = 6;
}

message BgpNeighbor {
  string address = 1;
  string remote_asn = 2;
  repeated string address_families = 3;
}

message RouteMap {
  string name = 1;
  repeated string match_prefix_lists = 2;
  string action = 3;
  uint32 sequence = 4;
}

message RouterConfig {
  string asn = 1;
  string router_id = 2;
  repeated BgpNeighbor neighbors = 3;
  repeated BgpAddressFamilyOptions options = 4;
  repeated RouteMap route_maps = 5;
}

message VRF {
  string name = 1;
  RouterConfig router = 2;
  VPC vpc = 3;
}

message GatewayConfig {
  uint64 generation = 1;
  repeated Device devices = 2;
  repeated Peering peerings = 3;
  repeated VRF vrfs = 4;
}
