syntax = "proto3";

package config;

option go_package = "dataplane/grpc";

service ConfigService {
  rpc GetConfig (GetConfigRequest) returns (GatewayConfig);
  rpc GetConfigGeneration (GetConfigGenerationRequest) returns (GetConfigGenerationResponse);
  rpc UpdateConfig (UpdateConfigRequest) returns (UpdateConfigResponse);
}

message GetConfigRequest {
}

message UpdateConfigRequest {
  GatewayConfig config = 1;
}

message UpdateConfigResponse {
  Error error = 1;
  string message = 2;
}

enum Error {
  ERROR_NONE = 0;
  ERROR_VALIDATION_FAILED = 1;
  ERROR_APPLY_FAILED = 2;
  ERROR_UNKNOWN_ERROR = 3;
}

message GetConfigGenerationRequest {
}

message GetConfigGenerationResponse {
  uint64 generation = 1;
}

/* ================================================ */
/* ==== Interfaces (both underlay and overlay) ==== */
/* ================================================ */

message Interface {
  string name = 1;
  string ipaddr = 2;
  IfType type = 3;
  IfRole role = 4;
}

enum IfType {
  IF_TYPE_ETHERNET = 0;
  IF_TYPE_VLAN = 1;
  IF_TYPE_LOOPBACK = 2;
  IF_TYPE_VTEP = 3;
}

enum IfRole {
  IF_ROLE_FABRIC = 0;
  IF_ROLE_EXTERNAL = 1;
}

/* ================= */
/* ==== Overlay ==== */
/* ================= */

message PeeringIPs {
  oneof rule {
    string cidr = 1;
    string not = 2;
  }
}

message PeeringAs {
  oneof rule {
    string cidr = 1;
    string not = 2;
  }
}

message Expose {
  repeated PeeringIPs ips = 1;
  repeated PeeringAs as = 2;
}

message PeeringEntryFor {
  string vpc = 1;
  repeated Expose expose = 2;
}

message VpcPeering {
  string name = 1; /* unique: e.g. VPC-1--VPC-2 */
  repeated PeeringEntryFor for = 2;
}

message VPC {
  string name = 1; /* unique (key) */
  uint32 vni = 2;
  repeated Interface interfaces = 3;
}

message Overlay {
  repeated VPC vpcs = 1;
  repeated VpcPeering peerings = 2;
}

/* ================== */
/* ==== Underlay ==== */
/* ================== */

message BgpAddressFamilyIPv4 {
  bool redistribute_connected = 1;
  bool redistribute_static = 2;
}

message BgpAddressFamilyIPv6 {
  bool redistribute_connected = 1;
  bool redistribute_static = 2;
}

message BgpAddressFamilyL2vpnEvpn {
  bool advertise_all_vni = 1;
}

enum BgpAF {
  IPV4_UNICAST = 0;
  IPV6_UNICAST = 1;
  L2VPN_EVPN = 2;
}

message BgpNeighbor {
  string address = 1;
  string remote_asn = 2;
  repeated BgpAF af_activate = 3;
}

message RouteMap {
  string name = 1;
  repeated string match_prefix_lists = 2;
  string action = 3;
  uint32 sequence = 4;
}

message RouterConfig {
  string asn = 1;
  string router_id = 2;
  repeated BgpNeighbor neighbors = 3;
  optional BgpAddressFamilyIPv4 ipv4_unicast = 4;
  optional BgpAddressFamilyIPv6 ipv6_unicast = 5;
  optional BgpAddressFamilyL2vpnEvpn l2vpn_evpn = 6;
  repeated RouteMap route_maps = 7;
}

message VRF {
  string name = 1;
  repeated Interface interfaces = 2;
  optional RouterConfig router = 3;
}

message Underlay {
  repeated VRF vrf = 1;
}

/* ================ */
/* ==== Device ==== */
/* ================ */

message Ports {
  string name = 1;
  string system_name = 2;
}

message Eal {
  // TODO:
  // rte_eal params
  // cpu list
  // cpu affinities ...
  // huge-pages
}

enum LogLevel {
  ERROR = 0;
  WARNING = 1;
  INFO = 2;
  DEBUG = 3;
  TRACE = 4;
}

enum PacketDriver {
  KERNEL = 0;
  DPDK = 1;
}

message Device {
  PacketDriver driver = 1;
  Eal eal = 2;
  repeated Ports ports = 3;
  string hostname = 4;
  LogLevel loglevel = 5;
}

/* ================ */
/* ====== All ===== */
/* ================ */

message GatewayConfig {
  uint64 generation = 1;
  Device device = 2;
  Underlay underlay = 3;
  Overlay overlay = 4;
}
