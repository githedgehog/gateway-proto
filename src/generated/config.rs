// Copyright 2025 Hedgehog
// SPDX-License-Identifier: Apache-2.0

// This file is @generated by prost-build.
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetConfigRequest {}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConfigRequest {
    #[prost(message, optional, tag = "1")]
    pub config: ::core::option::Option<GatewayConfig>,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConfigResponse {
    #[prost(enumeration = "Error", tag = "1")]
    pub error: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetConfigGenerationRequest {}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetConfigGenerationResponse {
    #[prost(int64, tag = "1")]
    pub generation: i64,
}
/// OSPF Interface configuration
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OspfInterface {
    #[prost(bool, tag = "1")]
    pub passive: bool,
    #[prost(string, tag = "2")]
    pub area: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "3")]
    pub cost: ::core::option::Option<u32>,
    #[prost(enumeration = "OspfNetworkType", optional, tag = "4")]
    pub network_type: ::core::option::Option<i32>,
}
/// OSPF process configuration
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OspfConfig {
    #[prost(string, tag = "1")]
    pub router_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub vrf: ::core::option::Option<::prost::alloc::string::String>,
}
/// Defines a logical interface. May correlate with physical representation
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Interface {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub ipaddrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "IfType", tag = "3")]
    pub r#type: i32,
    #[prost(enumeration = "IfRole", tag = "4")]
    pub role: i32,
    /// only if VLAN role is defined
    #[prost(uint32, optional, tag = "5")]
    pub vlan: ::core::option::Option<u32>,
    /// Base MAC address to be used to generate unified MAC for VTEP
    #[prost(string, optional, tag = "6")]
    pub macaddr: ::core::option::Option<::prost::alloc::string::String>,
    /// Parent interface for VLAN devices, only for VLAN role
    #[prost(string, optional, tag = "7")]
    pub system_name: ::core::option::Option<::prost::alloc::string::String>,
    /// OSPF interface configuration if enabled
    #[prost(message, optional, tag = "8")]
    pub ospf: ::core::option::Option<OspfInterface>,
}
/// Firewall log configuration
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FirewallLog {
    /// debug | info | warning | error
    #[prost(string, tag = "1")]
    pub level: ::prost::alloc::string::String,
    /// Custom log message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Source or destination matching for firewall rules
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FirewallEndpoint {
    #[prost(string, repeated, tag = "1")]
    pub cidrs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, repeated, tag = "2")]
    pub ports: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub port_ranges: ::prost::alloc::vec::Vec<FirewallPortRange>,
}
/// Port range definition
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FirewallPortRange {
    #[prost(uint32, tag = "1")]
    pub start: u32,
    #[prost(uint32, tag = "2")]
    pub end: u32,
}
/// Protocol-specific firewall rules
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FirewallProtocolRule {
    /// Source matching
    #[prost(message, optional, tag = "1")]
    pub src: ::core::option::Option<FirewallEndpoint>,
    /// Destination matching
    #[prost(message, optional, tag = "2")]
    pub dst: ::core::option::Option<FirewallEndpoint>,
}
/// Individual firewall rule
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FirewallRule {
    /// allow | deny
    #[prost(enumeration = "FirewallAction", tag = "1")]
    pub action: i32,
    /// Only stateless supported initially
    #[prost(bool, tag = "2")]
    pub stateless: bool,
    /// Logging configuration
    #[prost(message, optional, tag = "3")]
    pub log: ::core::option::Option<FirewallLog>,
    /// Protocol-specific rules (only one should be set)
    #[prost(message, optional, tag = "4")]
    pub tcp: ::core::option::Option<FirewallProtocolRule>,
    #[prost(message, optional, tag = "5")]
    pub udp: ::core::option::Option<FirewallProtocolRule>,
    #[prost(message, optional, tag = "6")]
    pub icmp: ::core::option::Option<FirewallProtocolRule>,
    /// Raw IP protocol number
    #[prost(uint32, optional, tag = "7")]
    pub protocol: ::core::option::Option<u32>,
}
/// Firewall configuration for a VPC in peering
///
/// SMATOV: different name maybe?
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeeringFirewall {
    #[prost(message, repeated, tag = "1")]
    pub rules: ::prost::alloc::vec::Vec<FirewallRule>,
}
/// Defines the list of prefixes that VPCs can expose
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeeringIPs {
    #[prost(oneof = "peering_i_ps::Rule", tags = "1, 2")]
    pub rule: ::core::option::Option<peering_i_ps::Rule>,
}
/// Nested message and enum types in `PeeringIPs`.
pub mod peering_i_ps {
    #[derive(::serde::Deserialize, ::serde::Serialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Rule {
        #[prost(string, tag = "1")]
        Cidr(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        Not(::prost::alloc::string::String),
    }
}
/// Defines the list of prefixes that exposing IPs will be translated to
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeeringAs {
    #[prost(oneof = "peering_as::Rule", tags = "1, 2")]
    pub rule: ::core::option::Option<peering_as::Rule>,
}
/// Nested message and enum types in `PeeringAs`.
pub mod peering_as {
    #[derive(::serde::Deserialize, ::serde::Serialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Rule {
        #[prost(string, tag = "1")]
        Cidr(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        Not(::prost::alloc::string::String),
    }
}
/// Defines a rule between exposing IP and translated
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Expose {
    #[prost(message, repeated, tag = "1")]
    pub ips: ::prost::alloc::vec::Vec<PeeringIPs>,
    #[prost(message, repeated, tag = "2")]
    pub r#as: ::prost::alloc::vec::Vec<PeeringAs>,
}
/// Defines a list of exposures per VPC
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeeringEntryFor {
    #[prost(string, tag = "1")]
    pub vpc: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub expose: ::prost::alloc::vec::Vec<Expose>,
    #[prost(message, optional, tag = "3")]
    pub firewall: ::core::option::Option<PeeringFirewall>,
}
/// There can be only one peering per pair of given VPCs
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VpcPeering {
    /// unique: e.g. VPC-1--VPC-2
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// it's guaranteed that only two entries are present
    #[prost(message, repeated, tag = "2")]
    pub r#for: ::prost::alloc::vec::Vec<PeeringEntryFor>,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vpc {
    /// unique
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// unique (key)
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub vni: u32,
    #[prost(message, repeated, tag = "4")]
    pub interfaces: ::prost::alloc::vec::Vec<Interface>,
}
/// Description of VPCs and Peerings between VPCs
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Overlay {
    #[prost(message, repeated, tag = "1")]
    pub vpcs: ::prost::alloc::vec::Vec<Vpc>,
    #[prost(message, repeated, tag = "2")]
    pub peerings: ::prost::alloc::vec::Vec<VpcPeering>,
}
/// BGP options for IPv4 UNICAST AFI
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BgpAddressFamilyIPv4 {
    #[prost(bool, tag = "1")]
    pub redistribute_connected: bool,
    #[prost(bool, tag = "2")]
    pub redistribute_static: bool,
}
/// BGP options for IPv6 UNICAST AFI
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BgpAddressFamilyIPv6 {
    #[prost(bool, tag = "1")]
    pub redistribute_connected: bool,
    #[prost(bool, tag = "2")]
    pub redistribute_static: bool,
}
/// BGP options for L2VPN EVPN AFI
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BgpAddressFamilyL2vpnEvpn {
    #[prost(bool, tag = "1")]
    pub advertise_all_vni: bool,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BgpNeighborUpdateSource {
    #[prost(oneof = "bgp_neighbor_update_source::Source", tags = "1, 2")]
    pub source: ::core::option::Option<bgp_neighbor_update_source::Source>,
}
/// Nested message and enum types in `BgpNeighborUpdateSource`.
pub mod bgp_neighbor_update_source {
    #[derive(::serde::Deserialize, ::serde::Serialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// ip address
        #[prost(string, tag = "1")]
        Address(::prost::alloc::string::String),
        /// name of interface - typically loopback
        #[prost(string, tag = "2")]
        Interface(::prost::alloc::string::String),
    }
}
/// BGP neighbor config
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BgpNeighbor {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub remote_asn: ::prost::alloc::string::String,
    #[prost(enumeration = "BgpAf", repeated, tag = "3")]
    pub af_activate: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "4")]
    pub update_source: ::core::option::Option<BgpNeighborUpdateSource>,
    #[prost(string, repeated, tag = "5")]
    pub networks: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// IP Prefix filtering route map description
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteMap {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub match_prefix_lists: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub action: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub sequence: u32,
}
/// BGP Router config description for VRFs
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouterConfig {
    #[prost(string, tag = "1")]
    pub asn: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub router_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub neighbors: ::prost::alloc::vec::Vec<BgpNeighbor>,
    #[prost(message, optional, tag = "4")]
    pub ipv4_unicast: ::core::option::Option<BgpAddressFamilyIPv4>,
    #[prost(message, optional, tag = "5")]
    pub ipv6_unicast: ::core::option::Option<BgpAddressFamilyIPv6>,
    #[prost(message, optional, tag = "6")]
    pub l2vpn_evpn: ::core::option::Option<BgpAddressFamilyL2vpnEvpn>,
    #[prost(message, repeated, tag = "7")]
    pub route_maps: ::prost::alloc::vec::Vec<RouteMap>,
}
/// VRF description with list of connected interfaces and its BGP config
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vrf {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub interfaces: ::prost::alloc::vec::Vec<Interface>,
    #[prost(message, optional, tag = "3")]
    pub router: ::core::option::Option<RouterConfig>,
    /// OSPF process configuration if enabled
    #[prost(message, optional, tag = "4")]
    pub ospf: ::core::option::Option<OspfConfig>,
}
/// List of all non-VPC VRFs
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Underlay {
    #[prost(message, repeated, tag = "1")]
    pub vrfs: ::prost::alloc::vec::Vec<Vrf>,
}
/// Defines physical or system-level device
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ports {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub system_name: ::prost::alloc::string::String,
}
/// RTE EAL config options for DPDK
///
/// TODO:
/// rte_eal params
/// cpu list
/// cpu affinities ...
/// huge-pages
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eal {}
/// System level config options
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Device {
    #[prost(enumeration = "PacketDriver", tag = "1")]
    pub driver: i32,
    #[prost(message, optional, tag = "2")]
    pub eal: ::core::option::Option<Eal>,
    #[prost(message, repeated, tag = "3")]
    pub ports: ::prost::alloc::vec::Vec<Ports>,
    #[prost(string, tag = "4")]
    pub hostname: ::prost::alloc::string::String,
    #[prost(enumeration = "LogLevel", tag = "5")]
    pub loglevel: i32,
}
/// Complete Gateway config options
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GatewayConfig {
    #[prost(int64, tag = "1")]
    pub generation: i64,
    #[prost(message, optional, tag = "2")]
    pub device: ::core::option::Option<Device>,
    #[prost(message, optional, tag = "3")]
    pub underlay: ::core::option::Option<Underlay>,
    #[prost(message, optional, tag = "4")]
    pub overlay: ::core::option::Option<Overlay>,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Error {
    None = 0,
    ValidationFailed = 1,
    ApplyFailed = 2,
    UnknownError = 3,
}
impl Error {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ERROR_NONE",
            Self::ValidationFailed => "ERROR_VALIDATION_FAILED",
            Self::ApplyFailed => "ERROR_APPLY_FAILED",
            Self::UnknownError => "ERROR_UNKNOWN_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR_NONE" => Some(Self::None),
            "ERROR_VALIDATION_FAILED" => Some(Self::ValidationFailed),
            "ERROR_APPLY_FAILED" => Some(Self::ApplyFailed),
            "ERROR_UNKNOWN_ERROR" => Some(Self::UnknownError),
            _ => None,
        }
    }
}
/// OSPF Network Type
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OspfNetworkType {
    Broadcast = 0,
    NonBroadcast = 1,
    PointToPoint = 2,
    PointToMultipoint = 3,
}
impl OspfNetworkType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Broadcast => "BROADCAST",
            Self::NonBroadcast => "NON_BROADCAST",
            Self::PointToPoint => "POINT_TO_POINT",
            Self::PointToMultipoint => "POINT_TO_MULTIPOINT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BROADCAST" => Some(Self::Broadcast),
            "NON_BROADCAST" => Some(Self::NonBroadcast),
            "POINT_TO_POINT" => Some(Self::PointToPoint),
            "POINT_TO_MULTIPOINT" => Some(Self::PointToMultipoint),
            _ => None,
        }
    }
}
/// Defines interface representation on the Gateway
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IfType {
    Ethernet = 0,
    Vlan = 1,
    Loopback = 2,
    Vtep = 3,
}
impl IfType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ethernet => "IF_TYPE_ETHERNET",
            Self::Vlan => "IF_TYPE_VLAN",
            Self::Loopback => "IF_TYPE_LOOPBACK",
            Self::Vtep => "IF_TYPE_VTEP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IF_TYPE_ETHERNET" => Some(Self::Ethernet),
            "IF_TYPE_VLAN" => Some(Self::Vlan),
            "IF_TYPE_LOOPBACK" => Some(Self::Loopback),
            "IF_TYPE_VTEP" => Some(Self::Vtep),
            _ => None,
        }
    }
}
/// For physical interface - fabric-facing or external-facing
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IfRole {
    Fabric = 0,
    External = 1,
}
impl IfRole {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Fabric => "IF_ROLE_FABRIC",
            Self::External => "IF_ROLE_EXTERNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IF_ROLE_FABRIC" => Some(Self::Fabric),
            "IF_ROLE_EXTERNAL" => Some(Self::External),
            _ => None,
        }
    }
}
/// Firewall rule actions
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FirewallAction {
    Allow = 0,
    Deny = 1,
}
impl FirewallAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Allow => "FIREWALL_ACTION_ALLOW",
            Self::Deny => "FIREWALL_ACTION_DENY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIREWALL_ACTION_ALLOW" => Some(Self::Allow),
            "FIREWALL_ACTION_DENY" => Some(Self::Deny),
            _ => None,
        }
    }
}
/// AFIs supported for BGP peering
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BgpAf {
    Ipv4Unicast = 0,
    Ipv6Unicast = 1,
    L2vpnEvpn = 2,
}
impl BgpAf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Ipv4Unicast => "IPV4_UNICAST",
            Self::Ipv6Unicast => "IPV6_UNICAST",
            Self::L2vpnEvpn => "L2VPN_EVPN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IPV4_UNICAST" => Some(Self::Ipv4Unicast),
            "IPV6_UNICAST" => Some(Self::Ipv6Unicast),
            "L2VPN_EVPN" => Some(Self::L2vpnEvpn),
            _ => None,
        }
    }
}
/// Log-level for dataplane and DPDK
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LogLevel {
    Error = 0,
    Warning = 1,
    Info = 2,
    Debug = 3,
    Trace = 4,
}
impl LogLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Error => "ERROR",
            Self::Warning => "WARNING",
            Self::Info => "INFO",
            Self::Debug => "DEBUG",
            Self::Trace => "TRACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR" => Some(Self::Error),
            "WARNING" => Some(Self::Warning),
            "INFO" => Some(Self::Info),
            "DEBUG" => Some(Self::Debug),
            "TRACE" => Some(Self::Trace),
            _ => None,
        }
    }
}
/// Backend driver for packet processing
#[cfg_attr(feature = "bolero", derive(::bolero::TypeGenerator))]
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PacketDriver {
    Kernel = 0,
    Dpdk = 1,
}
impl PacketDriver {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Kernel => "KERNEL",
            Self::Dpdk => "DPDK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "KERNEL" => Some(Self::Kernel),
            "DPDK" => Some(Self::Dpdk),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod config_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ConfigServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ConfigServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ConfigServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ConfigServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ConfigServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_config(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::GatewayConfig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/config.ConfigService/GetConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("config.ConfigService", "GetConfig"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_config_generation(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConfigGenerationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetConfigGenerationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/config.ConfigService/GetConfigGeneration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("config.ConfigService", "GetConfigGeneration"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_config(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/config.ConfigService/UpdateConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("config.ConfigService", "UpdateConfig"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod config_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ConfigServiceServer.
    #[async_trait]
    pub trait ConfigService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_config(
            &self,
            request: tonic::Request<super::GetConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::GatewayConfig>, tonic::Status>;
        async fn get_config_generation(
            &self,
            request: tonic::Request<super::GetConfigGenerationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetConfigGenerationResponse>,
            tonic::Status,
        >;
        async fn update_config(
            &self,
            request: tonic::Request<super::UpdateConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateConfigResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ConfigServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ConfigServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ConfigServiceServer<T>
    where
        T: ConfigService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/config.ConfigService/GetConfig" => {
                    #[allow(non_camel_case_types)]
                    struct GetConfigSvc<T: ConfigService>(pub Arc<T>);
                    impl<
                        T: ConfigService,
                    > tonic::server::UnaryService<super::GetConfigRequest>
                    for GetConfigSvc<T> {
                        type Response = super::GatewayConfig;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConfigRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ConfigService>::get_config(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConfigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/config.ConfigService/GetConfigGeneration" => {
                    #[allow(non_camel_case_types)]
                    struct GetConfigGenerationSvc<T: ConfigService>(pub Arc<T>);
                    impl<
                        T: ConfigService,
                    > tonic::server::UnaryService<super::GetConfigGenerationRequest>
                    for GetConfigGenerationSvc<T> {
                        type Response = super::GetConfigGenerationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConfigGenerationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ConfigService>::get_config_generation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConfigGenerationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/config.ConfigService/UpdateConfig" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateConfigSvc<T: ConfigService>(pub Arc<T>);
                    impl<
                        T: ConfigService,
                    > tonic::server::UnaryService<super::UpdateConfigRequest>
                    for UpdateConfigSvc<T> {
                        type Response = super::UpdateConfigResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateConfigRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ConfigService>::update_config(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateConfigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ConfigServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "config.ConfigService";
    impl<T> tonic::server::NamedService for ConfigServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
